"use strict";function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,t){if(r){if("string"==typeof r)return _arrayLikeToArray(r,t);var n={}.toString.call(r).slice(8,-1);return"Object"===n&&r.constructor&&(n=r.constructor.name),"Map"===n||"Set"===n?Array.from(r):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(r,t):void 0}}function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _arrayLikeToArray(r,t){(null==t||t>r.length)&&(t=r.length);for(var n=0,e=Array(t);n<t;n++)e[n]=r[n];return e}function dpAssignment(r,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,e=3<arguments.length&&void 0!==arguments[3]?arguments[3]:"min",a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:null,o=r.length,i=(1<<o)-1,l=Array(1<<o).fill(null).map(function(){return{}});l[0][0]={sumC:0,times:[]};for(var u=0;u<1<<o;u++){var s=w(u);if(!(o<=s))for(var m in l[u])for(var y=l[u][m],f=y.sumC,p=y.times,c=y.perm,A=0;A<o;A++)if(!(u&1<<A)){var v=f+r[s][A];if(null!==n&&n<v)continue;var d=p.concat([t[s][A]]),b=c?c.concat([A]):[A],_=u|1<<A,h=v;(!l[_][h]||l[_][h].sumC>v)&&(l[_][h]={sumC:v,times:d,perm:b})}}var g=null,T="min"===e?1/0:-1/0,C=1/0;for(var I in l[i]){var S=l[i][I],M=S.sumC,x=S.times,k=S.perm,L="min"===e?Math.max.apply(Math,_toConsumableArray(x)):Math.min.apply(Math,_toConsumableArray(x)),j=!0;null!==n&&n<M&&(j=!1),null!==a&&("min"===e&&a<L&&(j=!1),"max"===e&&L<a&&(j=!1)),j&&("min"===e&&(L<T||L===T&&M<C)||"max"===e&&(T<L||L===T&&M<C))&&(g=k,T=L,C=M)}return g?{assignment:g,cost:C,T_value:T}:null;function w(r){for(var t=0;r;)t+=1&r,r>>=1;return t}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.dpAssignment=dpAssignment;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRwX2Fzc2lnbm1lbnQuanMiXSwibmFtZXMiOlsiZHBBc3NpZ25tZW50IiwiQyIsIlQiLCJTX2xpbWl0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiVF90eXBlIiwiVF9saW1pdCIsIm4iLCJmdWxsIiwiZHAiLCJBcnJheSIsImZpbGwiLCJtYXAiLCJzdW1DIiwidGltZXMiLCJtYXNrIiwiaSIsImNvdW50Qml0cyIsInN1bUNzdHIiLCJfZHAkbWFzayRzdW1Dc3RyIiwicGVybSIsImoiLCJuZXdTdW1DIiwibmV3VGltZXMiLCJjb25jYXQiLCJuZXdQZXJtIiwia2V5IiwibmV3TWFzayIsImJlc3QiLCJJbmZpbml0eSIsImJlc3RTIiwiX2RwJGZ1bGwkX3N1bUNzdHIiLCJUdmFsIiwiTWF0aCIsIm1pbiIsImFwcGx5IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwidmFsaWQiLCJiZXN0VCIsImFzc2lnbm1lbnQiLCJjb3N0IiwiVF92YWx1ZSIsIngiLCJjIl0sIm1hcHBpbmdzIjoiODlCQUVPLFNBQVNBLGFBQWFDLEVBQUdDLEdBQW1ELElBQWhEQyxFQUFPLEVBQUFDLFVBQUFDLGFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFHLEtBQU1HLEVBQU0sRUFBQUgsVUFBQUMsYUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUcsTUFBT0ksRUFBTyxFQUFBSixVQUFBQyxhQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBRyxLQUNyRUssRUFBSVIsRUFBRUksT0FDTkssR0FBUSxHQUFLRCxHQUFLLEVBQ3BCRSxFQUFLQyxNQUFNLEdBQUtILEdBQUdJLEtBQUssTUFBTUMsSUFBSSxXQUFBLE1BQU8sS0FDN0NILEVBQUcsR0FBRyxHQUFLLENBQUVJLEtBQU0sRUFBR0MsTUFBTyxJQUM3QixJQUFLLElBQUlDLEVBQU8sRUFBR0EsRUFBUSxHQUFLUixFQUFJUSxJQUFRLENBQzFDLElBQUlDLEVBQUlDLEVBQVVGLEdBQ2xCLEtBQVNSLEdBQUxTLEdBQ0osSUFBSyxJQUFJRSxLQUFXVCxFQUFHTSxHQVYzQixJQVdNLElBQUFJLEVBQTRCVixFQUFHTSxHQUFNRyxHQUEvQkwsRUFBSU0sRUFBSk4sS0FBTUMsRUFBS0ssRUFBTEwsTUFBT00sRUFBSUQsRUFBSkMsS0FYekJDLEVBQUEsRUFBQUEsRUFBQWQsRUFBQWMsSUFDQSxLQUFBTixFQUFBLEdBQUFNLEdBQUEsQ0FDZ0J2QixJQUFBQSxFQUFjZSxFQUFxRGQsRUFBQWlCLEdBQUFLLEdBQWhEcEIsR0FBT0UsT0FBQUYsR0FBQUMsRUFBQW9CLEVBQUEsU0FBU2pCLElBQU1rQixFQUFBcEIsRUFBQXFCLE9BQUEsQ0FBQXRCLEVBQUFBLEdBQUFBLEtBQWlCdUIsRUFBQXZCLEVBQUFDLEVBQUFxQixPQUFBdEIsQ0FBQUEsSUFBQSxDQUFBbUIsR0FDNURsQixFQUFNWSxFQUFBLEdBQUFNLEVBQ0pLLEVBQU1KLElBQ1haLEVBQU9pQixHQUFPaEIsSUFBVUYsRUFBQ0csR0FBSWMsR0FBQWIsS0FBQVMsS0FBUWIsRUFBQ2tCLEdBQUFELEdBQUEsQ0FBQWIsS0FBQVMsRUFBQVIsTUFBQVMsRUFBQUgsS0FBQUssS0F1Qi9DLElBcEJFRyxFQUFRWCxLQUFBQSxFQUFlLFFBQUFaLEVBQUF3QixFQUFBQSxHQUFBQSxFQUFBQSxFQUFBQyxFQUFBRCxFQUFBQSxFQXFCekIsSUFwQkUsSUFBS1gsS0FBT1QsRUFBQUQsR0FBQSxDQUNaLElBQUF1QixFQUE0QnRCLEVBQUVELEdBQUFVLEdBQXpCTCxFQUFJSyxFQUFKTCxLQUFJSyxFQUFPYSxFQUFQYixNQUFPRSxFQUFPTCxFQUFQSyxLQUNkWSxFQUFBLFFBQUFiLEVBQStCSixLQUFNRyxJQUFBQSxNQUFOSCxLQUFNRyxtQkFBUUosSUFBQW1CLEtBQUFDLElBQUFDLE1BQUFGLEtBQUFHLG1CQUFBdEIsSUFBdkNELEdBQUlNLEVBQU9BLE9BQUxMLEdBQUFBLEVBQUtLLElBQUFrQixHQUFBLEdBQU1sQixPQUFKQyxJQUNMLFFBQWRmLEdBQTRCQyxFQUFKMEIsSUFBSUssR0FBQSxHQUNaLFFBQWRoQyxHQUF3QjJCLEVBQUExQixJQUFBK0IsR0FBQSxJQXlCeEJBLElBdEJjLFFBQVpoQyxJQUFxQm1CLEVBQVF4QixHQUFTZ0MsSUFBQU0sR0FBQXpCLEVBQUFpQixJQUMzQixRQUFYekIsSUFBMEJtQixFQUFMSixHQUFnQlksSUFBTU0sR0FBQXpCLEVBQUFpQixNQXdCN0NGLEVBdkJNRCxFQXdCTlcsRUF2Qk1aLEVBd0JOSSxFQXZCT3JCLEdBMkJiLE9BQUttQixFQUNFLENBQUVXLFdBM0JxRVgsRUFBQVksS0FBQVYsRUFBQVcsUUFBQUgsR0FBVGIsS0E0QnJFLFNBM0JRUixFQUFBeUIsR0E2Qk4sSUFEQSxJQTNCSUMsRUFBQSxFQUNGRCxHQUFBQyxHQUFBLEVBQUFELEVBQUFBLElBQUEsRUFDRixPQUFBQyIsImZpbGUiOiJkcF9hc3NpZ25tZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8g0JTQuNC90LDQvNC40YfQtdGB0LrQvtC1INC/0YDQvtCz0YDQsNC80LzQuNGA0L7QstCw0L3QuNC1INC00LvRjyDQt9Cw0LTQsNGH0Lgg0L4g0L3QsNC30L3QsNGH0LXQvdC40Y/RhSDRgSDQvtCz0YDQsNC90LjRh9C10L3QuNGP0LzQuCDQv9C+IEMg0LggVFxyXG4vLyBDLCBUIOKAlCDQutCy0LDQtNGA0LDRgtC90YvQtSDQvNCw0YLRgNC40YbRiywgU19saW1pdCDigJQg0L7Qs9GA0LDQvdC40YfQtdC90LjQtSDQvdCwINGB0YPQvNC80YMgQywgVF90eXBlICgnbWluJy8nbWF4JyksIFRfbGltaXQg4oCUINC+0LPRgNCw0L3QuNGH0LXQvdC40LUg0L3QsCBUXHJcbmV4cG9ydCBmdW5jdGlvbiBkcEFzc2lnbm1lbnQoQywgVCwgU19saW1pdCA9IG51bGwsIFRfdHlwZSA9ICdtaW4nLCBUX2xpbWl0ID0gbnVsbCkge1xyXG4gIGNvbnN0IG4gPSBDLmxlbmd0aDtcclxuICBjb25zdCBmdWxsID0gKDEgPDwgbikgLSAxO1xyXG4gIGxldCBkcCA9IEFycmF5KDEgPDwgbikuZmlsbChudWxsKS5tYXAoKCkgPT4gKHt9KSk7XHJcbiAgZHBbMF1bMF0gPSB7IHN1bUM6IDAsIHRpbWVzOiBbXSB9O1xyXG4gIGZvciAobGV0IG1hc2sgPSAwOyBtYXNrIDwgKDEgPDwgbik7IG1hc2srKykge1xyXG4gICAgbGV0IGkgPSBjb3VudEJpdHMobWFzayk7XHJcbiAgICBpZiAoaSA+PSBuKSBjb250aW51ZTtcclxuICAgIGZvciAobGV0IHN1bUNzdHIgaW4gZHBbbWFza10pIHtcclxuICAgICAgbGV0IHsgc3VtQywgdGltZXMsIHBlcm0gfSA9IGRwW21hc2tdW3N1bUNzdHJdO1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG47IGorKykge1xyXG4gICAgICAgIGlmICghKG1hc2sgJiAoMSA8PCBqKSkpIHtcclxuICAgICAgICAgIGxldCBuZXdTdW1DID0gc3VtQyArIENbaV1bal07XHJcbiAgICAgICAgICBpZiAoU19saW1pdCAhPT0gbnVsbCAmJiBuZXdTdW1DID4gU19saW1pdCkgY29udGludWU7XHJcbiAgICAgICAgICBsZXQgbmV3VGltZXMgPSB0aW1lcy5jb25jYXQoW1RbaV1bal1dKTtcclxuICAgICAgICAgIGxldCBuZXdQZXJtID0gcGVybSA/IHBlcm0uY29uY2F0KFtqXSkgOiBbal07XHJcbiAgICAgICAgICBsZXQgbmV3TWFzayA9IG1hc2sgfCAoMSA8PCBqKTtcclxuICAgICAgICAgIGxldCBrZXkgPSBuZXdTdW1DO1xyXG4gICAgICAgICAgaWYgKCFkcFtuZXdNYXNrXVtrZXldIHx8IGRwW25ld01hc2tdW2tleV0uc3VtQyA+IG5ld1N1bUMpIHtcclxuICAgICAgICAgICAgZHBbbmV3TWFza11ba2V5XSA9IHsgc3VtQzogbmV3U3VtQywgdGltZXM6IG5ld1RpbWVzLCBwZXJtOiBuZXdQZXJtIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vINCS0YvQsdC+0YAg0LvRg9GH0YjQtdCz0L4g0YDQtdGI0LXQvdC40Y9cclxuICBsZXQgYmVzdCA9IG51bGwsIGJlc3RUID0gVF90eXBlID09PSAnbWluJyA/IEluZmluaXR5IDogLUluZmluaXR5LCBiZXN0UyA9IEluZmluaXR5O1xyXG4gIGZvciAobGV0IHN1bUNzdHIgaW4gZHBbZnVsbF0pIHtcclxuICAgIGxldCB7IHN1bUMsIHRpbWVzLCBwZXJtIH0gPSBkcFtmdWxsXVtzdW1Dc3RyXTtcclxuICAgIGxldCBUdmFsID0gVF90eXBlID09PSAnbWluJyA/IE1hdGgubWF4KC4uLnRpbWVzKSA6IE1hdGgubWluKC4uLnRpbWVzKTtcclxuICAgIGxldCB2YWxpZCA9IHRydWU7XHJcbiAgICBpZiAoU19saW1pdCAhPT0gbnVsbCAmJiBzdW1DID4gU19saW1pdCkgdmFsaWQgPSBmYWxzZTtcclxuICAgIGlmIChUX2xpbWl0ICE9PSBudWxsKSB7XHJcbiAgICAgIGlmIChUX3R5cGUgPT09ICdtaW4nICYmIFR2YWwgPiBUX2xpbWl0KSB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICBpZiAoVF90eXBlID09PSAnbWF4JyAmJiBUdmFsIDwgVF9saW1pdCkgdmFsaWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh2YWxpZCkge1xyXG4gICAgICBpZiAoKFRfdHlwZSA9PT0gJ21pbicgJiYgKFR2YWwgPCBiZXN0VCB8fCAoVHZhbCA9PT0gYmVzdFQgJiYgc3VtQyA8IGJlc3RTKSkpIHx8XHJcbiAgICAgICAgICAoVF90eXBlID09PSAnbWF4JyAmJiAoVHZhbCA+IGJlc3RUIHx8IChUdmFsID09PSBiZXN0VCAmJiBzdW1DIDwgYmVzdFMpKSkpIHtcclxuICAgICAgICBiZXN0ID0gcGVybTtcclxuICAgICAgICBiZXN0VCA9IFR2YWw7XHJcbiAgICAgICAgYmVzdFMgPSBzdW1DO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmICghYmVzdCkgcmV0dXJuIG51bGw7XHJcbiAgcmV0dXJuIHsgYXNzaWdubWVudDogYmVzdCwgY29zdDogYmVzdFMsIFRfdmFsdWU6IGJlc3RUIH07XHJcbiAgZnVuY3Rpb24gY291bnRCaXRzKHgpIHtcclxuICAgIGxldCBjID0gMDtcclxuICAgIHdoaWxlICh4KSB7IGMgKz0geCAmIDE7IHggPj49IDE7IH1cclxuICAgIHJldHVybiBjO1xyXG4gIH1cclxufSAiXX0=
