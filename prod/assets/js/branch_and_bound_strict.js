"use strict";function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,n){if(r){if("string"==typeof r)return _arrayLikeToArray(r,n);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(r,n):void 0}}function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _arrayLikeToArray(r,n){(null==n||n>r.length)&&(n=r.length);for(var t=0,e=Array(n);t<n;t++)e[t]=r[t];return e}function branchAndBoundStrictAssignment(y,c){var m=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,p=3<arguments.length&&void 0!==arguments[3]?arguments[3]:"min",A=4<arguments.length&&void 0!==arguments[4]?arguments[4]:null,d=y.length,f=null,b="min"===p?1/0:-1/0,h=1/0;return function r(n,t,e,a,o){if(n===d){var i="min"===p?Math.max.apply(Math,_toConsumableArray(o)):Math.min.apply(Math,_toConsumableArray(o)),l=!0;return null!==m&&m<a&&(l=!1),null!==A&&("min"===p&&A<i&&(l=!1),"max"===p&&i<A&&(l=!1)),void(l&&("min"===p&&(i<b||i===b&&a<h)||"max"===p&&(b<i||i===b&&a<h))&&(f=e.slice(),b=i,h=a))}for(var u=0;u<d;u++)if(!t[u]){var s=a+y[n][u];if(null!==m&&m<s)continue;t[u]=!0,e.push(u),o.push(c[n][u]),r(n+1,t,e,s,o),t[u]=!1,e.pop(),o.pop()}}(0,Array(d).fill(!1),[],0,[]),f?{assignment:f,cost:h,T_value:b}:null}Object.defineProperty(exports,"__esModule",{value:!0}),exports.branchAndBoundStrictAssignment=branchAndBoundStrictAssignment;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyYW5jaF9hbmRfYm91bmRfc3RyaWN0LmpzIl0sIm5hbWVzIjpbImJyYW5jaEFuZEJvdW5kU3RyaWN0QXNzaWdubWVudCIsIkMiLCJUIiwiU19saW1pdCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIlRfdHlwZSIsIlRfbGltaXQiLCJuIiwiYmVzdCIsImJlc3RUIiwiSW5maW5pdHkiLCJiZXN0UyIsImRmcyIsImkiLCJ1c2VkIiwicGVybSIsInN1bUMiLCJ0aW1lcyIsIlR2YWwiLCJNYXRoIiwibWF4IiwiYXBwbHkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJtaW4iLCJ2YWxpZCIsInNsaWNlIiwiaiIsIm5ld1N1bUMiLCJwb3AiLCJBcnJheSIsImZpbGwiLCJhc3NpZ25tZW50IiwiVF92YWx1ZSJdLCJtYXBwaW5ncyI6Ijg5QkFFTyxTQUFTQSwrQkFBK0JDLEVBQUdDLEdBQW1ELElBQWhEQyxFQUFPLEVBQUFDLFVBQUFDLGFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFHLEtBQU1HLEVBQU0sRUFBQUgsVUFBQUMsYUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUcsTUFBT0ksRUFBTyxFQUFBSixVQUFBQyxhQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBRyxLQUN2RkssRUFBSVIsRUFBRUksT0FDUkssRUFBTyxLQUNQQyxFQUFtQixRQUFYSixFQUFtQkssRUFBQUEsR0FBWUEsRUFBQUEsRUFDdkNDLEVBQVFELEVBQUFBLEVBbUNaLE9BbENBLFNBQVNFLEVBQUlDLEVBQUdDLEVBQU1DLEVBQU1DLEVBQU1DLEdBQ2hDLEdBQUlKLElBQU1OLEVBQUcsQ0FDWCxJQUFJVyxFQUFrQixRQUFYYixFQUFtQmMsS0FBS0MsSUFBR0MsTUFBUkYsS0FBSUcsbUJBQVFMLElBQVNFLEtBQUtJLElBQUdGLE1BQVJGLEtBQUlHLG1CQUFRTCxJQUMzRE8sR0FBUSxFQURaLE9BRWdCLE9BQVp2QixHQUEyQkEsRUFBUGUsSUFBZ0JRLEdBQVEsR0FYdEQsT0FBQWxCLElBQ0EsUUFBQUQsR0FBQUMsRUFBQVksSUFBQU0sR0FBQSxHQUNnQjFCLFFBQUFBLEdBQUFBLEVBQThCQSxJQUF1RDBCLEdBQUEsU0FBaENuQixJQUF1QkgsUUFBQUcsSUFBQWEsRUFBQWhCLEdBQUFnQixJQUFBZCxHQUFBRixFQUFBQSxJQUN4RSxRQUFOQyxJQUFNTSxFQUFBUyxHQUFBQSxJQUFBVCxHQUFBTyxFQUFBTCxNQUNWSCxFQUFPTyxFQUFBVSxRQUNYaEIsRUFBUUosRUFDUk0sRUFBUUQsSUFvQlYsSUFmRSxJQUFJVCxFQUFPLEVBQUF5QixFQUFLbkIsRUFBSW1CLElBQ3BCLElBQUlwQixFQUFBQSxHQUFPLENBQ1QsSUFBSUQsRUFBTVcsRUFBVWpCLEVBQUFjLEdBQUlLLEdBQ3hCLEdBQWUsT0FBWGIsR0FBMkJDLEVBQVBZLEVBQWdCTSxTQUMxQ1YsRUFBQVksSUFBQSxFQUNBWCxFQUFJUyxLQUFPRSxHQUNUVCxFQUFLWixLQUFNTCxFQUFBYSxHQUFLYSxJQWdCaEJkLEVBZEVKLEVBQUksRUFBR08sRUFBS1UsRUFBT0UsRUFBQVYsR0FlckJILEVBZEVMLElBQVFTLEVBZVZILEVBZEVKLE1BQ0ZNLEVBQUFXLE9Ba0JOaEIsQ0FkRSxFQUFLaUIsTUFBS3RCLEdBQUl1QixNQUFHLEdBQVMsR0FBRSxFQUFBLElBQzFCdEIsRUFDRSxDQUFBdUIsV0FBY2YsRUFBT2pCLEtBQU1ZLEVBQUNxQixRQUFBdkIsR0FEaEIiLCJmaWxlIjoiYnJhbmNoX2FuZF9ib3VuZF9zdHJpY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyDQnNC10YLQvtC0INCy0LXRgtCy0LXQuSDQuCDQs9GA0LDQvdC40YYg0LTQu9GPINC30LDQtNCw0YfQuCDQviDQvdCw0LfQvdCw0YfQtdC90LjRj9GFINGBINC+0LPRgNCw0L3QuNGH0LXQvdC40Y/QvNC4INC/0L4gQyDQuCBUXHJcbi8vIEMsIFQg4oCUINC60LLQsNC00YDQsNGC0L3Ri9C1INC80LDRgtGA0LjRhtGLLCBTX2xpbWl0IOKAlCDQvtCz0YDQsNC90LjRh9C10L3QuNC1INC90LAg0YHRg9C80LzRgyBDLCBUX3R5cGUgKCdtaW4nLydtYXgnKSwgVF9saW1pdCDigJQg0L7Qs9GA0LDQvdC40YfQtdC90LjQtSDQvdCwIFRcclxuZXhwb3J0IGZ1bmN0aW9uIGJyYW5jaEFuZEJvdW5kU3RyaWN0QXNzaWdubWVudChDLCBULCBTX2xpbWl0ID0gbnVsbCwgVF90eXBlID0gJ21pbicsIFRfbGltaXQgPSBudWxsKSB7XHJcbiAgY29uc3QgbiA9IEMubGVuZ3RoO1xyXG4gIGxldCBiZXN0ID0gbnVsbDtcclxuICBsZXQgYmVzdFQgPSBUX3R5cGUgPT09ICdtaW4nID8gSW5maW5pdHkgOiAtSW5maW5pdHk7XHJcbiAgbGV0IGJlc3RTID0gSW5maW5pdHk7XHJcbiAgZnVuY3Rpb24gZGZzKGksIHVzZWQsIHBlcm0sIHN1bUMsIHRpbWVzKSB7XHJcbiAgICBpZiAoaSA9PT0gbikge1xyXG4gICAgICBsZXQgVHZhbCA9IFRfdHlwZSA9PT0gJ21pbicgPyBNYXRoLm1heCguLi50aW1lcykgOiBNYXRoLm1pbiguLi50aW1lcyk7XHJcbiAgICAgIGxldCB2YWxpZCA9IHRydWU7XHJcbiAgICAgIGlmIChTX2xpbWl0ICE9PSBudWxsICYmIHN1bUMgPiBTX2xpbWl0KSB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICBpZiAoVF9saW1pdCAhPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChUX3R5cGUgPT09ICdtaW4nICYmIFR2YWwgPiBUX2xpbWl0KSB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChUX3R5cGUgPT09ICdtYXgnICYmIFR2YWwgPCBUX2xpbWl0KSB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgIGlmICgoVF90eXBlID09PSAnbWluJyAmJiAoVHZhbCA8IGJlc3RUIHx8IChUdmFsID09PSBiZXN0VCAmJiBzdW1DIDwgYmVzdFMpKSkgfHxcclxuICAgICAgICAgICAgKFRfdHlwZSA9PT0gJ21heCcgJiYgKFR2YWwgPiBiZXN0VCB8fCAoVHZhbCA9PT0gYmVzdFQgJiYgc3VtQyA8IGJlc3RTKSkpKSB7XHJcbiAgICAgICAgICBiZXN0ID0gcGVybS5zbGljZSgpO1xyXG4gICAgICAgICAgYmVzdFQgPSBUdmFsO1xyXG4gICAgICAgICAgYmVzdFMgPSBzdW1DO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG47IGorKykge1xyXG4gICAgICBpZiAoIXVzZWRbal0pIHtcclxuICAgICAgICBsZXQgbmV3U3VtQyA9IHN1bUMgKyBDW2ldW2pdO1xyXG4gICAgICAgIGlmIChTX2xpbWl0ICE9PSBudWxsICYmIG5ld1N1bUMgPiBTX2xpbWl0KSBjb250aW51ZTsgLy8g0L7RgtGB0LXRh9C10L3QuNC1INC/0L4gQ1xyXG4gICAgICAgIHVzZWRbal0gPSB0cnVlO1xyXG4gICAgICAgIHBlcm0ucHVzaChqKTtcclxuICAgICAgICB0aW1lcy5wdXNoKFRbaV1bal0pO1xyXG4gICAgICAgIGRmcyhpICsgMSwgdXNlZCwgcGVybSwgbmV3U3VtQywgdGltZXMpO1xyXG4gICAgICAgIHVzZWRbal0gPSBmYWxzZTtcclxuICAgICAgICBwZXJtLnBvcCgpO1xyXG4gICAgICAgIHRpbWVzLnBvcCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGRmcygwLCBBcnJheShuKS5maWxsKGZhbHNlKSwgW10sIDAsIFtdKTtcclxuICBpZiAoIWJlc3QpIHJldHVybiBudWxsO1xyXG4gIHJldHVybiB7IGFzc2lnbm1lbnQ6IGJlc3QsIGNvc3Q6IGJlc3RTLCBUX3ZhbHVlOiBiZXN0VCB9O1xyXG59ICJdfQ==
