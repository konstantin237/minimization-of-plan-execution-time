"use strict";var _hungarian=require("./hungarian.js"),_branch_and_bound=require("./branch_and_bound.js"),_lp_assignment=require("./lp_assignment.js"),_greedy_assignment=require("./greedy_assignment.js");function _regeneratorValues(t){if(null!=t){var e=t["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length))return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}throw new TypeError(_typeof(t)+" is not iterable")}function _regenerator(){var m,g,t="function"==typeof Symbol?Symbol:{},e=t.iterator||"@@iterator",n=t.toStringTag||"@@toStringTag";function r(t,e,n,r){var a,i,o,l,c,s,u,h,d,f=e&&e.prototype instanceof p?e:p,v=Object.create(f.prototype);return _regeneratorDefine2(v,"_invoke",(a=t,i=n,u=r||[],h=!1,d={p:s=0,n:0,v:m,a:y,f:y.bind(m,4),d:function(t,e){return o=t,l=0,c=m,d.n=e,b}},function(t,e,n){if(1<s)throw TypeError("Generator is already running");for(h&&1===e&&y(e,n),l=e,c=n;(g=l<2?m:c)||!h;){o||(l?l<3?(1<l&&(d.n=-1),y(l,c)):d.n=c:d.v=c);try{if(s=2,o){if(l||(t="next"),g=o[t]){if(!(g=g.call(o,c)))throw TypeError("iterator result is not an object");if(!g.done)return g;c=g.value,l<2&&(l=0)}else 1===l&&(g=o.return)&&g.call(o),l<2&&(c=TypeError("The iterator does not provide a '"+t+"' method"),l=1);o=m}else if((g=(h=d.n<0)?c:a.call(i,d))!==b)break}catch(t){o=m,l=1,c=t}finally{s=1}}return{value:g,done:h}}),!0),v;function y(t,e){for(l=t,c=e,g=0;!h&&s&&!n&&g<u.length;g++){var n,r=u[g],a=d.p,i=r[2];3<t?(n=i===e)&&(l=r[4]||3,c=r[5]===m?r[3]:r[5],r[4]=3,r[5]=m):r[0]<=a&&((n=t<2&&a<r[1])?(l=0,d.v=e,d.n=r[1]):a<i&&(n=t<3||r[0]>e||i<e)&&(r[4]=t,r[5]=e,d.n=i,l=0))}if(n||1<t)return b;throw h=!0,e}}var b={};function p(){}function a(){}function i(){}g=Object.getPrototypeOf;var o=[][e]?g(g([][e]())):(_regeneratorDefine2(g={},e,function(){return this}),g),l=i.prototype=p.prototype=Object.create(o);function c(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,i):(t.__proto__=i,_regeneratorDefine2(t,n,"GeneratorFunction")),t.prototype=Object.create(l),t}return _regeneratorDefine2(l,"constructor",a.prototype=i),_regeneratorDefine2(i,"constructor",a),_regeneratorDefine2(i,n,a.displayName="GeneratorFunction"),_regeneratorDefine2(l),_regeneratorDefine2(l,n,"Generator"),_regeneratorDefine2(l,e,function(){return this}),_regeneratorDefine2(l,"toString",function(){return"[object Generator]"}),(_regenerator=function(){return{w:r,m:c}})()}function _regeneratorDefine2(t,e,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(t){i=0}(_regeneratorDefine2=function(t,e,n,r){if(e)i?i(t,e,{value:n,enumerable:!r,configurable:!r,writable:!r}):t[e]=n;else{var a=function(e,n){_regeneratorDefine2(t,e,function(t){return this._invoke(e,n,t)})};a("next",0),a("throw",1),a("return",2)}})(t,e,n,r)}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _createForOfIteratorHelper(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,a=function(){};return{s:a,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return o=t.done,t},e:function(t){l=!0,i=t},f:function(){try{o||null==n.return||n.return()}finally{if(l)throw i}}}}function _unsupportedIterableToArray(t,e){if(t){if("string"==typeof t)return _arrayLikeToArray(t,e);var n={}.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(t,e):void 0}}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=Array(e);n<e;n++)r[n]=t[n];return r}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,_toPropertyKey(r.key),r)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){var e=_toPrimitive(t,"string");return"symbol"==_typeof(e)?e:e+""}function _toPrimitive(t,e){if("object"!=_typeof(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0===n)return("string"===e?String:Number)(t);var r=n.call(t,e||"default");if("object"!=_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}var AssignmentModel=function(){function E(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:3;_classCallCheck(this,E),this.size=t,this.C=Array.from({length:t},function(){return Array(t).fill(0)}),this.T=Array.from({length:t},function(){return Array(t).fill(0)}),this.S=0,this.T_type="min",this.T_limit=""}return _createClass(E,[{key:"setMatrixC",value:function(t){this.C=t}},{key:"setMatrixT",value:function(t){this.T=t}},{key:"setS",value:function(t){this.S=t}},{key:"setTType",value:function(t){this.T_type=t}},{key:"setTLimit",value:function(t){this.T_limit=t}},{key:"solve",value:function(t){var e,n=this,r=0<arguments.length&&void 0!==t?t:{},a=this.size,i=Array.from({length:a},function(t,e){return e}),o=[],l=null,c=_createForOfIteratorHelper(E.permutations(i));try{for(c.s();!(e=c.n()).done;){for(var s=e.value,u=0,h=[],d=[],f=0;f<a;f++){var v=this.C[f][s[f]],y=this.T[f][s[f]];u+=v,h.push(y),d.push({worker:f+1,job:s[f]+1,c:v,t:y})}var m="min"===this.T_type?Math.max.apply(Math,h):Math.min.apply(Math,h),g=!0;if(this.S&&u>this.S&&(g=!1),r.skipIncreasingTime){if(null!==l&&l<m)continue;l=m}r.hideInvalidSolutions&&!g||o.push({perm:s,sumC:u,T_value:m,table:d,valid:g})}}catch(t){c.e(t)}finally{c.f()}var b=o.filter(function(t){return t.valid});if(""!==this.T_limit&&(b="min"===this.T_type?b.filter(function(t){return t.T_value<=n.T_limit}):b.filter(function(t){return t.T_value>=n.T_limit})),0===b.length)return{answer:"Нет допустимых решений",solutions:o};var p=Math.min.apply(Math,_toConsumableArray(b.map(function(t){return t.T_value}))),_=b.filter(function(t){return t.T_value===p}),T=Math.min.apply(Math,_toConsumableArray(_.map(function(t){return t.sumC}))),x=_.filter(function(t){return t.sumC===T});return{answer:1===x.length?x[0]:x,solutions:o}}}],[{key:"permutations",value:function(t){if(1===t.length)return[t];for(var e=[],n=0;n<t.length;n++){var r,a=t.slice(0,n).concat(t.slice(n+1)),i=_createForOfIteratorHelper(E.permutations(a));try{for(i.s();!(r=i.n()).done;){var o=r.value;e.push([t[n]].concat(o))}}catch(t){i.e(t)}finally{i.f()}}return e}}])}(),AssignmentView=function(){return _createClass(function t(){_classCallCheck(this,t),this.matrixCTextarea=document.getElementById("matrix-c-textarea"),this.matrixTTextarea=document.getElementById("matrix-t-textarea"),this.syncTextareas()},[{key:"syncTextareas",value:function(){var t=this.matrixCTextarea,e=this.matrixTTextarea;function n(t,e){e.style.height=t.style.height}t&&e&&(t.addEventListener("input",function(){t.style.height="auto",t.style.height=t.scrollHeight+"px",n(t,e)}),e.addEventListener("input",function(){e.style.height="auto",e.style.height=e.scrollHeight+"px",n(e,t)}),setTimeout(function(){t.style.height="auto",e.style.height="auto",t.style.height=t.scrollHeight+"px",e.style.height=e.scrollHeight+"px",t.scrollHeight>e.scrollHeight?e.style.height=t.style.height:t.style.height=e.style.height},0))}},{key:"parseMatrixFromTextarea",value:function(t){var e=t.trim().split("\n").filter(function(t){return""!==t.trim()}).map(function(t){return t.trim().split(/\s+/).map(Number)}),n=e.map(function(t){return t.length}),r=n.every(function(t){return t===n[0]});return{matrix:e,size:e.length,isSquare:r&&e.length===n[0]}}},{key:"getParams",value:function(){return{S:+document.getElementById("salary-fund").value,T_type:document.getElementById("t-type").value,T_limit:""===document.getElementById("t-limit").value?"":+document.getElementById("t-limit").value,skipIncreasingTime:document.getElementById("skip-increasing-time").checked,hideInvalidSolutions:document.getElementById("hide-invalid-solutions").checked,solveHungarian:document.getElementById("solve-hungarian").checked,solveBranch:document.getElementById("solve-branch").checked,solveLP:document.getElementById("solve-lp").checked,solveGreedy:document.getElementById("solve-greedy").checked}}},{key:"getMatrixC",value:function(){return this.matrixCTextarea?this.parseMatrixFromTextarea(this.matrixCTextarea.value):{matrix:[],size:0,isSquare:!1}}},{key:"getMatrixT",value:function(){return this.matrixTTextarea?this.parseMatrixFromTextarea(this.matrixTTextarea.value):{matrix:[],size:0,isSquare:!1}}},{key:"renderAnswer",value:function(t){var e=document.getElementById("answer");if("string"!=typeof t){if(Array.isArray(t)){var r="";return t.forEach(function(t,e){r+="<b>Решение ".concat(e+1,"</b>"),r+="<table><thead><tr><th></th><th><b>Решение</b></th></tr></thead><tbody>";for(var n=0;n<t.perm.length;n++)r+="<tr><th>x".concat(n+1,"</th><td>").concat(t.perm[n]+1," (C: ").concat(t.table[n].c,", T: ").concat(t.table[n].t,")</td></tr>");r+="<tr><th>S</th><td>".concat(t.sumC,"</td></tr>"),r+="<tr><th>T</th><td>".concat(t.T_value,"</td></tr>"),r+="</tbody></table>"}),void(e.innerHTML=r)}for(var n="<table><thead><tr><th></th><th><b>Решение</b></th></tr></thead><tbody>",a=0;a<t.perm.length;a++)n+="<tr><th>x".concat(a+1,"</th><td>").concat(t.perm[a]+1," (C: ").concat(t.table[a].c,", T: ").concat(t.table[a].t,")</td></tr>");n+="<tr><th>S</th><td>".concat(t.sumC,"</td></tr>"),n+="<tr><th>T</th><td>".concat(t.T_value,"</td></tr>"),n+="</tbody></table>",e.innerHTML=n}else e.textContent=t}},{key:"renderSolutionTable",value:function(t){var e=document.getElementById("solution-table");if(t&&0!==t.length){var n=t[0].perm.length,i="<table><thead><tr><th></th>";t.forEach(function(t,e){i+="<th".concat(t.valid?"":' style="opacity:0.5"',">Решение № ").concat(e+1,"</th>")}),i+="</tr></thead><tbody>";for(var r=function(a){i+="<tr><th>x".concat(a+1,"</th>"),t.forEach(function(t){var e=t.perm[a],n=t.table[a].c,r=t.table[a].t;i+="<td".concat(t.valid?"":' style="opacity:0.5"',">").concat(e+1," (C: ").concat(n,", T: ").concat(r,")</td>")}),i+="</tr>"},a=0;a<n;a++)r(a);i+="<tr><th>S</th>",t.forEach(function(t){i+="<td".concat(t.valid?"":' style="opacity:0.5"',">").concat(t.sumC,"</td>")}),i+="</tr>",i+="<tr><th>T</th>",t.forEach(function(t){i+="<td".concat(t.valid?"":' style="opacity:0.5"',">").concat(t.T_value,"</td>")}),i+="</tr>",i+="</tbody></table>",e.innerHTML=i}else e.innerHTML=""}},{key:"renderHungarianMethod",value:function(t){return(0,_hungarian.hungarianMethod)(t)}},{key:"renderOtherMethods",value:function(t){var e="";e+="<h3>Метод ветвей и границ</h3>",e+="<div>Метод ветвей и границ строит дерево решений, отбрасывая заведомо невыгодные варианты. Обычно используется для больших задач, когда полный перебор невозможен.</div>";var n=(0,_branch_and_bound.branchAndBoundAssignment)(t);if(n){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var r=0;r<n.assignment.length;r++)e+="<tr><th>x".concat(r+1,"</th><td>").concat(n.assignment[r]+1," (C: ").concat(t[r][n.assignment[r]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(n.cost,"</div>")}e+="<h3>Линейное программирование</h3>",e+="<div>Задача о назначениях может быть сведена к задаче линейного программирования и решена симплекс-методом или другими LP-алгоритмами.</div>";var a=(0,_lp_assignment.lpAssignment)(t);if(a){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var i=0;i<a.assignment.length;i++)e+="<tr><th>x".concat(i+1,"</th><td>").concat(a.assignment[i]+1," (C: ").concat(t[i][a.assignment[i]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(a.cost,"</div>")}e+="<h3>Жадные и эвристические методы</h3>",e+="<div>Жадные методы назначают работ по принципу минимальной стоимости на каждом шаге, но не гарантируют оптимальности.</div>";var o=(0,_greedy_assignment.greedyAssignment)(t);if(o){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var l=0;l<o.assignment.length;l++)e+="<tr><th>x".concat(l+1,"</th><td>").concat(o.assignment[l]+1," (C: ").concat(t[l][o.assignment[l]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(o.cost,"</div>")}return e}},{key:"renderExtraMethods",value:function(t,e){var n=document.getElementById("extra-methods"),r="",a=t,i=a.length,o=0<i&&a.every(function(t){return t.length===i});if(e.solveHungarian)if(r+="<h3>Решение методом Венгера (венгерский алгоритм)</h3>",o){var l=this.robustHungarianMethod(a);if(l){r+="<div><b>Решение:</b></div>",r+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var c=0;c<l.assignment.length;c++)r+="<tr><th>x".concat(c+1,"</th><td>").concat(l.assignment[c]+1," (C: ").concat(a[c][l.assignment[c]],")</td></tr>");r+="</tbody></table>",r+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(l.cost,"</div>")}else r+="<div>Венгерский алгоритм не смог найти решение для этой матрицы. Возможно, матрица содержит некорректные значения.</div>"}else r+='<div style="color:red">Матрица должна быть квадратной (n×n), проверьте ввод.</div>';e.solveBranch&&(r+=this.renderBranchMethod(a)),e.solveLP&&(r+=this.renderLPMethod(a)),e.solveGreedy&&(r+=this.renderGreedyMethod(a)),n.innerHTML=r}},{key:"robustHungarianMethod",value:function(t){var l=_regenerator().m(g),a=t.length;if(!a||t.some(function(t){return t.length!==a}))return null;for(var i=t.map(function(t){return t.slice()}),e=0;e<a;e++)for(var n=Math.min.apply(Math,_toConsumableArray(i[e])),r=0;r<a;r++)i[e][r]-=n;for(var o=function(e){for(var t=i.map(function(t){return t[e]}),n=Math.min.apply(Math,_toConsumableArray(t)),r=0;r<a;r++)i[r][e]-=n},c=0;c<a;c++)o(c);for(var s=Array(a).fill(-1),u=Array(a).fill(!1),h=0;h<a;h++)for(var d=0;d<a;d++)if(0===i[h][d]&&!u[d]){u[s[h]=d]=!0;break}if(!s.includes(-1)){for(var f=0,v=0;v<a;v++)f+=t[v][s[v]];return{assignment:s,cost:f}}if(7<a)return null;var y=1/0,m=null;function g(e,n,r){var a,i,o;return _regenerator().w(function(t){for(;;)switch(t.n){case 0:if(n===r)return t.n=1,e.slice();t.n=2;break;case 1:t.n=6;break;case 2:a=n;case 3:if(a<=r)return i=[e[a],e[n]],e[n]=i[0],e[a]=i[1],t.d(_regeneratorValues(g(e,n+1,r)),4);t.n=6;break;case 4:o=[e[a],e[n]],e[n]=o[0],e[a]=o[1];case 5:a++,t.n=3;break;case 6:return t.a(2)}},l)}var b,p=_createForOfIteratorHelper(g(Array.from({length:a},function(t,e){return e}),0,a-1));try{for(p.s();!(b=p.n()).done;){for(var _=b.value,T=0,x=0;x<a;x++)T+=t[x][_[x]];T<y&&(y=T,m=_.slice())}}catch(t){p.e(t)}finally{p.f()}return m?{assignment:m,cost:y}:null}},{key:"renderBranchMethod",value:function(t){var e="<h3>Метод ветвей и границ</h3>",n=(0,_branch_and_bound.branchAndBoundAssignment)(t);if(n){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var r=0;r<n.assignment.length;r++)e+="<tr><th>x".concat(r+1,"</th><td>").concat(n.assignment[r]+1," (C: ").concat(t[r][n.assignment[r]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(n.cost,"</div>")}return e}},{key:"renderLPMethod",value:function(t){var e="<h3>Линейное программирование</h3>",n=(0,_lp_assignment.lpAssignment)(t);if(n){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var r=0;r<n.assignment.length;r++)e+="<tr><th>x".concat(r+1,"</th><td>").concat(n.assignment[r]+1," (C: ").concat(t[r][n.assignment[r]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(n.cost,"</div>")}return e}},{key:"renderGreedyMethod",value:function(t){var e="<h3>Жадные и эвристические методы</h3>",n=(0,_greedy_assignment.greedyAssignment)(t);if(n){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var r=0;r<n.assignment.length;r++)e+="<tr><th>x".concat(r+1,"</th><td>").concat(n.assignment[r]+1," (C: ").concat(t[r][n.assignment[r]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(n.cost,"</div>")}return e}}])}(),AssignmentController=function(){return _createClass(function t(){_classCallCheck(this,t),this.model=null,this.view=new AssignmentView,this.initEvents(),this.initPresetButtons()},[{key:"initEvents",value:function(){var t=this;document.getElementById("solve-btn").addEventListener("click",function(){return t.solve()})}},{key:"initPresetButtons",value:function(){var t=document.getElementById("matrix-c-textarea"),e=document.getElementById("matrix-t-textarea"),n=document.getElementById("salary-fund");document.getElementById("fill-default").addEventListener("click",function(){t.value="3 4 5 8 3\n2 9 6 7 8\n5 1 8 5 2\n8 9 6 4 3\n3 2 5 7 9",e.value="7 6 5 2 7\n8 1 4 3 2\n5 9 2 5 8\n2 1 4 6 7\n7 8 5 3 1",n.value=33,t.dispatchEvent(new Event("input")),e.dispatchEvent(new Event("input"))}),document.getElementById("fill-test").addEventListener("click",function(){t.value="2 2 2\n2 2 2\n2 2 2",e.value="1 1 2\n1 2 1\n2 1 1",n.value=6,t.dispatchEvent(new Event("input")),e.dispatchEvent(new Event("input"))}),document.getElementById("clear-all").addEventListener("click",function(){t.value="",e.value="",n.value="",t.dispatchEvent(new Event("input")),e.dispatchEvent(new Event("input"))})}},{key:"solve",value:function(){var t=this.view.getMatrixC(),e=t.matrix,n=t.size,r=(t.isSquare,this.view.getMatrixT()),a=r.matrix,i=r.size;window.assignmentModelInputC=e,window.assignmentModelInputT=a;var o=Math.min(n,i);if(!o||e.length!==o||a.length!==o)return this.view.renderAnswer("Ошибка: некорректный ввод матриц"),this.view.renderSolutionTable([]),void(document.getElementById("extra-methods").innerHTML="");this.model=new AssignmentModel(o),this.model.setMatrixC(e),this.model.setMatrixT(a);var l=this.view.getParams();this.model.setS(l.S),this.model.setTType(l.T_type),this.model.setTLimit(l.T_limit);var c=this.model.solve(l),s=c.answer,u=c.solutions;this.view.renderAnswer(s.answer||s),this.view.renderSolutionTable(u),this.view.renderExtraMethods(e,l)}}])}();window.addEventListener("DOMContentLoaded",function(){new AssignmentController});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
