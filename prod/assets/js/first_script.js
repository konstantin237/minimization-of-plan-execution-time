"use strict";var _hungarian=require("./hungarian.js"),_branch_and_bound=require("./branch_and_bound.js"),_lp_assignment=require("./lp_assignment.js"),_greedy_assignment=require("./greedy_assignment.js");function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _createForOfIteratorHelper(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,l=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){l=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(l)throw a}}}}function _unsupportedIterableToArray(t,e){if(t){if("string"==typeof t)return _arrayLikeToArray(t,e);var r={}.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(t,e):void 0}}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=Array(e);r<e;r++)n[r]=t[r];return n}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_toPropertyKey(n.key),n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){var e=_toPrimitive(t,"string");return"symbol"==_typeof(e)?e:e+""}function _toPrimitive(t,e){if("object"!=_typeof(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);var n=r.call(t,e||"default");if("object"!=_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}var AssignmentModel=function(){function C(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:3;_classCallCheck(this,C),this.size=t,this.C=Array.from({length:t},function(){return Array(t).fill(0)}),this.T=Array.from({length:t},function(){return Array(t).fill(0)}),this.S=0,this.T_type="min",this.T_limit=""}return _createClass(C,[{key:"setMatrixC",value:function(t){this.C=t}},{key:"setMatrixT",value:function(t){this.T=t}},{key:"setS",value:function(t){this.S=t}},{key:"setTType",value:function(t){this.T_type=t}},{key:"setTLimit",value:function(t){this.T_limit=t}},{key:"solve",value:function(t){var e,r=this,n=0<arguments.length&&void 0!==t?t:{},i=this.size,a=Array.from({length:i},function(t,e){return e}),o=[],l=null,s=_createForOfIteratorHelper(C.permutations(a));try{for(s.s();!(e=s.n()).done;){for(var u=e.value,c=0,h=[],d=[],y=0;y<i;y++){var m=this.C[y][u[y]],f=this.T[y][u[y]];c+=m,h.push(f),d.push({worker:y+1,job:u[y]+1,c:m,t:f})}var v="min"===this.T_type?Math.max.apply(Math,h):Math.min.apply(Math,h),g=!0;if(this.S&&c>this.S&&(g=!1),n.skipIncreasingTime){if(null!==l&&l<v)continue;l=v}n.hideInvalidSolutions&&!g||o.push({perm:u,sumC:c,T_value:v,table:d,valid:g})}}catch(t){s.e(t)}finally{s.f()}var b=o.filter(function(t){return t.valid});if(""!==this.T_limit&&(b="min"===this.T_type?b.filter(function(t){return t.T_value<=r.T_limit}):b.filter(function(t){return t.T_value>=r.T_limit})),0===b.length)return{answer:"Нет допустимых решений",solutions:o};var p=Math.min.apply(Math,_toConsumableArray(b.map(function(t){return t.T_value}))),T=b.filter(function(t){return t.T_value===p}),_=Math.min.apply(Math,_toConsumableArray(T.map(function(t){return t.sumC}))),x=T.filter(function(t){return t.sumC===_});return{answer:1===x.length?x[0]:x,solutions:o}}}],[{key:"permutations",value:function(t){if(1===t.length)return[t];for(var e=[],r=0;r<t.length;r++){var n,i=t.slice(0,r).concat(t.slice(r+1)),a=_createForOfIteratorHelper(C.permutations(i));try{for(a.s();!(n=a.n()).done;){var o=n.value;e.push([t[r]].concat(o))}}catch(t){a.e(t)}finally{a.f()}}return e}}])}(),AssignmentView=function(){return _createClass(function t(){_classCallCheck(this,t),this.matrixCTextarea=document.getElementById("matrix-c-textarea"),this.matrixTTextarea=document.getElementById("matrix-t-textarea"),this.syncTextareas()},[{key:"syncTextareas",value:function(){var t=this.matrixCTextarea,e=this.matrixTTextarea;function r(t,e){e.style.height=t.style.height}t&&e&&(t.addEventListener("input",function(){t.style.height="auto",t.style.height=t.scrollHeight+"px",r(t,e)}),e.addEventListener("input",function(){e.style.height="auto",e.style.height=e.scrollHeight+"px",r(e,t)}),setTimeout(function(){t.style.height="auto",e.style.height="auto",t.style.height=t.scrollHeight+"px",e.style.height=e.scrollHeight+"px",t.scrollHeight>e.scrollHeight?e.style.height=t.style.height:t.style.height=e.style.height},0))}},{key:"parseMatrixFromTextarea",value:function(t){var e=t.trim().split("\n").filter(function(t){return""!==t.trim()}).map(function(t){return t.trim().split(/\s+/).map(Number)}),r=e.map(function(t){return t.length}),n=r.every(function(t){return t===r[0]});return{matrix:e,size:e.length,isSquare:n&&e.length===r[0]}}},{key:"getParams",value:function(){return{S:+document.getElementById("salary-fund").value,T_type:document.getElementById("t-type").value,T_limit:""===document.getElementById("t-limit").value?"":+document.getElementById("t-limit").value,skipIncreasingTime:document.getElementById("skip-increasing-time").checked,hideInvalidSolutions:document.getElementById("hide-invalid-solutions").checked}}},{key:"getMatrixC",value:function(){return this.matrixCTextarea?this.parseMatrixFromTextarea(this.matrixCTextarea.value):{matrix:[],size:0,isSquare:!1}}},{key:"getMatrixT",value:function(){return this.matrixTTextarea?this.parseMatrixFromTextarea(this.matrixTTextarea.value):{matrix:[],size:0,isSquare:!1}}},{key:"renderAnswer",value:function(t){var e=document.getElementById("answer");if("string"!=typeof t){if(Array.isArray(t)){var n="";return t.forEach(function(t,e){n+="<b>Решение ".concat(e+1,"</b>"),n+="<table><thead><tr><th></th><th><b>Решение</b></th></tr></thead><tbody>";for(var r=0;r<t.perm.length;r++)n+="<tr><th>x".concat(r+1,"</th><td>").concat(t.perm[r]+1," (C: ").concat(t.table[r].c,", T: ").concat(t.table[r].t,")</td></tr>");n+="<tr><th>S</th><td>".concat(t.sumC,"</td></tr>"),n+="<tr><th>T</th><td>".concat(t.T_value,"</td></tr>"),n+="</tbody></table>"}),void(e.innerHTML=n)}for(var r="<table><thead><tr><th></th><th><b>Решение</b></th></tr></thead><tbody>",i=0;i<t.perm.length;i++)r+="<tr><th>x".concat(i+1,"</th><td>").concat(t.perm[i]+1," (C: ").concat(t.table[i].c,", T: ").concat(t.table[i].t,")</td></tr>");r+="<tr><th>S</th><td>".concat(t.sumC,"</td></tr>"),r+="<tr><th>T</th><td>".concat(t.T_value,"</td></tr>"),r+="</tbody></table>",e.innerHTML=r}else e.textContent=t}},{key:"renderSolutionTable",value:function(t){var e=document.getElementById("solution-table");if(t&&0!==t.length){var r=t[0].perm.length,a="<table><thead><tr><th></th>";t.forEach(function(t,e){a+="<th".concat(t.valid?"":' style="opacity:0.5"',">Решение № ").concat(e+1,"</th>")}),a+="</tr></thead><tbody>";for(var n=function(i){a+="<tr><th>x".concat(i+1,"</th>"),t.forEach(function(t){var e=t.perm[i],r=t.table[i].c,n=t.table[i].t;a+="<td".concat(t.valid?"":' style="opacity:0.5"',">").concat(e+1," (C: ").concat(r,", T: ").concat(n,")</td>")}),a+="</tr>"},i=0;i<r;i++)n(i);a+="<tr><th>S</th>",t.forEach(function(t){a+="<td".concat(t.valid?"":' style="opacity:0.5"',">").concat(t.sumC,"</td>")}),a+="</tr>",a+="<tr><th>T</th>",t.forEach(function(t){a+="<td".concat(t.valid?"":' style="opacity:0.5"',">").concat(t.T_value,"</td>")}),a+="</tr>",a+="</tbody></table>",e.innerHTML=a}else e.innerHTML=""}},{key:"renderHungarianMethod",value:function(t){return(0,_hungarian.hungarianMethod)(t)}},{key:"renderOtherMethods",value:function(t){var e="";e+="<h3>Метод ветвей и границ</h3>",e+="<div>Метод ветвей и границ строит дерево решений, отбрасывая заведомо невыгодные варианты. Обычно используется для больших задач, когда полный перебор невозможен.</div>";var r=(0,_branch_and_bound.branchAndBoundAssignment)(t);if(r){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var n=0;n<r.assignment.length;n++)e+="<tr><th>x".concat(n+1,"</th><td>").concat(r.assignment[n]+1," (C: ").concat(t[n][r.assignment[n]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(r.cost,"</div>")}e+="<h3>Линейное программирование</h3>",e+="<div>Задача о назначениях может быть сведена к задаче линейного программирования и решена симплекс-методом или другими LP-алгоритмами.</div>";var i=(0,_lp_assignment.lpAssignment)(t);if(i){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var a=0;a<i.assignment.length;a++)e+="<tr><th>x".concat(a+1,"</th><td>").concat(i.assignment[a]+1," (C: ").concat(t[a][i.assignment[a]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(i.cost,"</div>")}e+="<h3>Жадные и эвристические методы</h3>",e+="<div>Жадные методы назначают работ по принципу минимальной стоимости на каждом шаге, но не гарантируют оптимальности.</div>";var o=(0,_greedy_assignment.greedyAssignment)(t);if(o){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var l=0;l<o.assignment.length;l++)e+="<tr><th>x".concat(l+1,"</th><td>").concat(o.assignment[l]+1," (C: ").concat(t[l][o.assignment[l]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(o.cost,"</div>")}return e}},{key:"renderExtraMethods",value:function(t){var e=document.getElementById("extra-methods"),r="",n=t,i=n.length;if(r+="<h3>Решение методом Венгера (венгерский алгоритм)</h3>",0<i&&n.every(function(t){return t.length===i})){var a=this.renderHungarianMethod(n);if(a){r+="<div><b>Решение:</b></div>",r+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var o=0;o<a.assignment.length;o++)r+="<tr><th>x".concat(o+1,"</th><td>").concat(a.assignment[o]+1," (C: ").concat(n[o][a.assignment[o]],")</td></tr>");r+="</tbody></table>",r+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(a.cost,"</div>")}else r+="<div>Венгерский алгоритм не смог найти решение для этой матрицы.</div>"}else r+='<div style="color:red">Матрица должна быть квадратной (n×n), проверьте ввод.</div>';r+=this.renderOtherMethods(n),e.innerHTML=r}}])}(),AssignmentController=function(){return _createClass(function t(){_classCallCheck(this,t),this.model=null,this.view=new AssignmentView,this.initEvents()},[{key:"initEvents",value:function(){var t=this;document.getElementById("solve-btn").addEventListener("click",function(){return t.solve()})}},{key:"solve",value:function(){var t=this.view.getMatrixC(),e=t.matrix,r=t.size,n=(t.isSquare,this.view.getMatrixT()),i=n.matrix,a=n.size;window.assignmentModelInputC=e,window.assignmentModelInputT=i;var o=Math.min(r,a);if(!o||e.length!==o||i.length!==o)return this.view.renderAnswer("Ошибка: некорректный ввод матриц"),this.view.renderSolutionTable([]),void(document.getElementById("extra-methods").innerHTML="");this.model=new AssignmentModel(o),this.model.setMatrixC(e),this.model.setMatrixT(i);var l=this.view.getParams();this.model.setS(l.S),this.model.setTType(l.T_type),this.model.setTLimit(l.T_limit);var s=this.model.solve(l),u=s.answer,c=s.solutions;this.view.renderAnswer(u.answer||u),this.view.renderSolutionTable(c),this.view.renderExtraMethods(e)}}])}();window.addEventListener("DOMContentLoaded",function(){new AssignmentController});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
