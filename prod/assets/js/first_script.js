"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _createForOfIteratorHelper(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,a=function(){};return{s:a,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,l=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){l=!0,i=t},f:function(){try{o||null==r.return||r.return()}finally{if(l)throw i}}}}function _unsupportedIterableToArray(t,e){if(t){if("string"==typeof t)return _arrayLikeToArray(t,e);var r={}.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(t,e):void 0}}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=Array(e);r<e;r++)n[r]=t[r];return n}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_toPropertyKey(n.key),n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){var e=_toPrimitive(t,"string");return"symbol"==_typeof(e)?e:e+""}function _toPrimitive(t,e){if("object"!=_typeof(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);var n=r.call(t,e||"default");if("object"!=_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}var AssignmentModel=function(){function b(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:3;_classCallCheck(this,b),this.size=t,this.C=Array.from({length:t},function(){return Array(t).fill(0)}),this.T=Array.from({length:t},function(){return Array(t).fill(0)}),this.S=0,this.T_type="min",this.T_limit=""}return _createClass(b,[{key:"setMatrixC",value:function(t){this.C=t}},{key:"setMatrixT",value:function(t){this.T=t}},{key:"setS",value:function(t){this.S=t}},{key:"setTType",value:function(t){this.T_type=t}},{key:"setTLimit",value:function(t){this.T_limit=t}},{key:"solve",value:function(){var t,e=this,r=this.size,n=Array.from({length:r},function(t,e){return e}),a=[],i=_createForOfIteratorHelper(b.permutations(n));try{for(i.s();!(t=i.n()).done;){for(var o=t.value,l=0,u=[],s=[],c=0;c<r;c++){var f=this.C[c][o[c]],m=this.T[c][o[c]];l+=f,u.push(m),s.push({worker:c+1,job:o[c]+1,c:f,t:m})}var y="min"===this.T_type?Math.max.apply(Math,u):Math.min.apply(Math,u),h=!0;this.S&&l>this.S&&(h=!1),a.push({perm:o,sumC:l,T_value:y,table:s,valid:h})}}catch(t){i.e(t)}finally{i.f()}var d,v=a.filter(function(t){return t.valid});if(""!==this.T_limit&&(v="min"===this.T_type?v.filter(function(t){return t.T_value<=e.T_limit}):v.filter(function(t){return t.T_value>=e.T_limit})),0===v.length)return{answer:"Нет допустимых решений",solutions:a};if("min"===this.T_type){var p=Math.min.apply(Math,_toConsumableArray(v.map(function(t){return t.T_value})));d=v.find(function(t){return t.T_value===p})}else{var T=Math.max.apply(Math,_toConsumableArray(v.map(function(t){return t.T_value})));d=v.find(function(t){return t.T_value===T})}return{answer:d,solutions:a}}}],[{key:"permutations",value:function(t){if(1===t.length)return[t];for(var e=[],r=0;r<t.length;r++){var n,a=t.slice(0,r).concat(t.slice(r+1)),i=_createForOfIteratorHelper(b.permutations(a));try{for(i.s();!(n=i.n()).done;){var o=n.value;e.push([t[r]].concat(o))}}catch(t){i.e(t)}finally{i.f()}}return e}}])}(),AssignmentView=function(){return _createClass(function t(){_classCallCheck(this,t),this.matrixCTextarea=document.getElementById("matrix-c-textarea"),this.matrixTTextarea=document.getElementById("matrix-t-textarea")},[{key:"parseMatrixFromTextarea",value:function(t){var e=t.trim().split("\n").filter(function(t){return""!==t.trim()}).map(function(t){return t.trim().split(/\s+/).map(Number)}),r=Math.min.apply(Math,_toConsumableArray(e.map(function(t){return t.length}))),n=e.map(function(t){return t.slice(0,r)});return{matrix:n,size:n.length}}},{key:"getMatrixC",value:function(){return this.matrixCTextarea?this.parseMatrixFromTextarea(this.matrixCTextarea.value):{matrix:[],size:0}}},{key:"getMatrixT",value:function(){return this.matrixTTextarea?this.parseMatrixFromTextarea(this.matrixTTextarea.value):{matrix:[],size:0}}},{key:"getParams",value:function(){return{S:+document.getElementById("salary-fund").value,T_type:document.getElementById("t-type").value,T_limit:""===document.getElementById("t-limit").value?"":+document.getElementById("t-limit").value}}},{key:"renderAnswer",value:function(t){var e=document.getElementById("answer");if("string"!=typeof t){for(var r="<table><thead><tr><th></th><th><b>Решение</b></th></tr></thead><tbody>",n=0;n<t.perm.length;n++)r+="<tr><th>x".concat(n+1,"</th><td>").concat(t.perm[n]+1," (C: ").concat(t.table[n].c,", T: ").concat(t.table[n].t,")</td></tr>");r+="<tr><th>S</th><td>".concat(t.sumC,"</td></tr>"),r+="<tr><th>T</th><td>".concat(t.T_value,"</td></tr>"),r+="</tbody></table>",e.innerHTML=r}else e.textContent=t}},{key:"renderSolutionTable",value:function(t){var e=document.getElementById("solution-table");if(t&&0!==t.length){var r=t[0].perm.length,i="<table><thead><tr><th></th>";t.forEach(function(t,e){i+="<th".concat(t.valid?"":' style="opacity:0.5"',">Решение № ").concat(e+1,"</th>")}),i+="</tr></thead><tbody>";for(var n=function(a){i+="<tr><th>x".concat(a+1,"</th>"),t.forEach(function(t){var e=t.perm[a],r=t.table[a].c,n=t.table[a].t;i+="<td".concat(t.valid?"":' style="opacity:0.5"',">").concat(e+1," (C: ").concat(r,", T: ").concat(n,")</td>")}),i+="</tr>"},a=0;a<r;a++)n(a);i+="<tr><th>S</th>",t.forEach(function(t){i+="<td".concat(t.valid?"":' style="opacity:0.5"',">").concat(t.sumC,"</td>")}),i+="</tr>",i+="<tr><th>T</th>",t.forEach(function(t){i+="<td".concat(t.valid?"":' style="opacity:0.5"',">").concat(t.T_value,"</td>")}),i+="</tr>",i+="</tbody></table>",e.innerHTML=i}else e.innerHTML=""}}])}(),AssignmentController=function(){return _createClass(function t(){_classCallCheck(this,t),this.model=null,this.view=new AssignmentView,this.initEvents()},[{key:"initEvents",value:function(){var t=this;document.getElementById("solve-btn").addEventListener("click",function(){return t.solve()})}},{key:"solve",value:function(){var t=this.view.getMatrixC(),e=t.matrix,r=t.size,n=this.view.getMatrixT(),a=n.matrix,i=n.size;window.assignmentModelInputC=e,window.assignmentModelInputT=a;var o=Math.min(r,i);if(!o||e.length!==o||a.length!==o)return this.view.renderAnswer("Ошибка: некорректный ввод матриц"),void this.view.renderSolutionTable([]);this.model=new AssignmentModel(o),this.model.setMatrixC(e),this.model.setMatrixT(a);var l=this.view.getParams();this.model.setS(l.S),this.model.setTType(l.T_type),this.model.setTLimit(l.T_limit);var u=this.model.solve(),s=u.answer,c=u.solutions;this.view.renderAnswer(s.answer||s),this.view.renderSolutionTable(c)}}])}();window.addEventListener("DOMContentLoaded",function(){new AssignmentController});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
