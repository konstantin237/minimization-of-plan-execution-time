"use strict";var _hungarian=require("./hungarian.js"),_branch_and_bound=require("./branch_and_bound.js"),_lp_assignment=require("./lp_assignment.js"),_greedy_assignment=require("./greedy_assignment.js"),_branch_and_bound_strict=require("./branch_and_bound_strict.js"),_dp_assignment=require("./dp_assignment.js"),_astar_assignment=require("./astar_assignment.js");function _regeneratorValues(t){if(null!=t){var e=t["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length))return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}throw new TypeError(_typeof(t)+" is not iterable")}function _regenerator(){var y,b,t="function"==typeof Symbol?Symbol:{},e=t.iterator||"@@iterator",n=t.toStringTag||"@@toStringTag";function r(t,e,n,r){var a,i,o,l,s,c,u,h,d,m=e&&e.prototype instanceof p?e:p,f=Object.create(m.prototype);return _regeneratorDefine2(f,"_invoke",(a=t,i=n,u=r||[],h=!1,d={p:c=0,n:0,v:y,a:v,f:v.bind(y,4),d:function(t,e){return o=t,l=0,s=y,d.n=e,g}},function(t,e,n){if(1<c)throw TypeError("Generator is already running");for(h&&1===e&&v(e,n),l=e,s=n;(b=l<2?y:s)||!h;){o||(l?l<3?(1<l&&(d.n=-1),v(l,s)):d.n=s:d.v=s);try{if(c=2,o){if(l||(t="next"),b=o[t]){if(!(b=b.call(o,s)))throw TypeError("iterator result is not an object");if(!b.done)return b;s=b.value,l<2&&(l=0)}else 1===l&&(b=o.return)&&b.call(o),l<2&&(s=TypeError("The iterator does not provide a '"+t+"' method"),l=1);o=y}else if((b=(h=d.n<0)?s:a.call(i,d))!==g)break}catch(t){o=y,l=1,s=t}finally{c=1}}return{value:b,done:h}}),!0),f;function v(t,e){for(l=t,s=e,b=0;!h&&c&&!n&&b<u.length;b++){var n,r=u[b],a=d.p,i=r[2];3<t?(n=i===e)&&(l=r[4]||3,s=r[5]===y?r[3]:r[5],r[4]=3,r[5]=y):r[0]<=a&&((n=t<2&&a<r[1])?(l=0,d.v=e,d.n=r[1]):a<i&&(n=t<3||r[0]>e||i<e)&&(r[4]=t,r[5]=e,d.n=i,l=0))}if(n||1<t)return g;throw h=!0,e}}var g={};function p(){}function a(){}function i(){}b=Object.getPrototypeOf;var o=[][e]?b(b([][e]())):(_regeneratorDefine2(b={},e,function(){return this}),b),l=i.prototype=p.prototype=Object.create(o);function s(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,i):(t.__proto__=i,_regeneratorDefine2(t,n,"GeneratorFunction")),t.prototype=Object.create(l),t}return _regeneratorDefine2(l,"constructor",a.prototype=i),_regeneratorDefine2(i,"constructor",a),_regeneratorDefine2(i,n,a.displayName="GeneratorFunction"),_regeneratorDefine2(l),_regeneratorDefine2(l,n,"Generator"),_regeneratorDefine2(l,e,function(){return this}),_regeneratorDefine2(l,"toString",function(){return"[object Generator]"}),(_regenerator=function(){return{w:r,m:s}})()}function _regeneratorDefine2(t,e,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(t){i=0}(_regeneratorDefine2=function(t,e,n,r){if(e)i?i(t,e,{value:n,enumerable:!r,configurable:!r,writable:!r}):t[e]=n;else{var a=function(e,n){_regeneratorDefine2(t,e,function(t){return this._invoke(e,n,t)})};a("next",0),a("throw",1),a("return",2)}})(t,e,n,r)}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _createForOfIteratorHelper(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,a=function(){};return{s:a,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return o=t.done,t},e:function(t){l=!0,i=t},f:function(){try{o||null==n.return||n.return()}finally{if(l)throw i}}}}function _unsupportedIterableToArray(t,e){if(t){if("string"==typeof t)return _arrayLikeToArray(t,e);var n={}.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(t,e):void 0}}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=Array(e);n<e;n++)r[n]=t[n];return r}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,_toPropertyKey(r.key),r)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){var e=_toPrimitive(t,"string");return"symbol"==_typeof(e)?e:e+""}function _toPrimitive(t,e){if("object"!=_typeof(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0===n)return("string"===e?String:Number)(t);var r=n.call(t,e||"default");if("object"!=_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}var AssignmentModel=function(){function A(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:3;_classCallCheck(this,A),this.size=t,this.C=Array.from({length:t},function(){return Array(t).fill(0)}),this.T=Array.from({length:t},function(){return Array(t).fill(0)}),this.S=0,this.T_type="min",this.T_limit=""}return _createClass(A,[{key:"setMatrixC",value:function(t){this.C=t}},{key:"setMatrixT",value:function(t){this.T=t}},{key:"setS",value:function(t){this.S=t}},{key:"setTType",value:function(t){this.T_type=t}},{key:"setTLimit",value:function(t){this.T_limit=t}},{key:"solve",value:function(t){var e,n=this,r=0<arguments.length&&void 0!==t?t:{},a=this.size,i=Array.from({length:a},function(t,e){return e}),o=[],l=null,s=_createForOfIteratorHelper(A.permutations(i));try{for(s.s();!(e=s.n()).done;){for(var c=e.value,u=0,h=[],d=[],m=0;m<a;m++){var f=this.C[m][c[m]],v=this.T[m][c[m]];u+=f,h.push(v),d.push({worker:m+1,job:c[m]+1,c:f,t:v})}var y="min"===this.T_type?Math.max.apply(Math,h):Math.min.apply(Math,h),b=!0;if(this.S&&u>this.S&&(b=!1),r.skipIncreasingTime){if(null!==l&&l<y)continue;l=y}r.hideInvalidSolutions&&!b||o.push({perm:c,sumC:u,T_value:y,table:d,valid:b})}}catch(t){s.e(t)}finally{s.f()}var g=o.filter(function(t){return t.valid});if(""!==this.T_limit&&(g="min"===this.T_type?g.filter(function(t){return t.T_value<=n.T_limit}):g.filter(function(t){return t.T_value>=n.T_limit})),0===g.length)return{answer:"Нет допустимых решений",solutions:o};var p=Math.min.apply(Math,_toConsumableArray(g.map(function(t){return t.T_value}))),_=g.filter(function(t){return t.T_value===p}),T=Math.min.apply(Math,_toConsumableArray(_.map(function(t){return t.sumC}))),x=_.filter(function(t){return t.sumC===T});return{answer:1===x.length?x[0]:x,solutions:o}}}],[{key:"permutations",value:function(t){if(1===t.length)return[t];for(var e=[],n=0;n<t.length;n++){var r,a=t.slice(0,n).concat(t.slice(n+1)),i=_createForOfIteratorHelper(A.permutations(a));try{for(i.s();!(r=i.n()).done;){var o=r.value;e.push([t[n]].concat(o))}}catch(t){i.e(t)}finally{i.f()}}return e}}])}(),AssignmentView=function(){return _createClass(function t(){_classCallCheck(this,t),this.matrixCTextarea=document.getElementById("matrix-c-textarea"),this.matrixTTextarea=document.getElementById("matrix-t-textarea"),this.syncTextareas()},[{key:"syncTextareas",value:function(){var t=this.matrixCTextarea,e=this.matrixTTextarea;function n(t,e){e.style.height=t.style.height}t&&e&&(t.addEventListener("input",function(){t.style.height="auto",t.style.height=t.scrollHeight+"px",n(t,e)}),e.addEventListener("input",function(){e.style.height="auto",e.style.height=e.scrollHeight+"px",n(e,t)}),setTimeout(function(){t.style.height="auto",e.style.height="auto",t.style.height=t.scrollHeight+"px",e.style.height=e.scrollHeight+"px",t.scrollHeight>e.scrollHeight?e.style.height=t.style.height:t.style.height=e.style.height},0))}},{key:"parseMatrixFromTextarea",value:function(t){var e=t.trim().split("\n").filter(function(t){return""!==t.trim()}).map(function(t){return t.trim().split(/\s+/).map(Number)}),n=e.map(function(t){return t.length}),r=n.every(function(t){return t===n[0]});return{matrix:e,size:e.length,isSquare:r&&e.length===n[0]}}},{key:"getParams",value:function(){return{S:+document.getElementById("salary-fund").value,T_type:document.getElementById("t-type").value,T_limit:""===document.getElementById("t-limit").value?"":+document.getElementById("t-limit").value,skipIncreasingTime:document.getElementById("skip-increasing-time").checked,hideInvalidSolutions:document.getElementById("hide-invalid-solutions").checked,solveFull:!document.getElementById("solve-full")||document.getElementById("solve-full").checked,solveBnbStrict:!document.getElementById("solve-bnb-strict")||document.getElementById("solve-bnb-strict").checked,solveAstar:!document.getElementById("solve-astar")||document.getElementById("solve-astar").checked}}},{key:"getMatrixC",value:function(){return this.matrixCTextarea?this.parseMatrixFromTextarea(this.matrixCTextarea.value):{matrix:[],size:0,isSquare:!1}}},{key:"getMatrixT",value:function(){return this.matrixTTextarea?this.parseMatrixFromTextarea(this.matrixTTextarea.value):{matrix:[],size:0,isSquare:!1}}},{key:"renderAnswer",value:function(e,r){var t=document.getElementById("answer");if("string"!=typeof e){if(Array.isArray(e)){var a="";return e.forEach(function(e){var t=r.findIndex(function(t){return JSON.stringify(t.perm)===JSON.stringify(e.perm)});a+="<b>Решение №".concat(t+1,"</b>"),a+="<table><thead><tr><th></th><th><b>Решение</b></th></tr></thead><tbody>";for(var n=0;n<e.perm.length;n++)a+="<tr><th>x".concat(n+1,"</th><td>").concat(e.perm[n]+1," (C: ").concat(e.table[n].c,", T: ").concat(e.table[n].t,")</td></tr>");a+="<tr><th>S</th><td>".concat(e.sumC,"</td></tr>"),a+="<tr><th>T</th><td>".concat(e.T_value,"</td></tr>"),a+="</tbody></table>"}),void(t.innerHTML=a)}var n=r.findIndex(function(t){return JSON.stringify(t.perm)===JSON.stringify(e.perm)}),i="<b>Решение №".concat(n+1,"</b>");i+="<table><thead><tr><th></th><th><b>Решение</b></th></tr></thead><tbody>";for(var o=0;o<e.perm.length;o++)i+="<tr><th>x".concat(o+1,"</th><td>").concat(e.perm[o]+1," (C: ").concat(e.table[o].c,", T: ").concat(e.table[o].t,")</td></tr>");i+="<tr><th>S</th><td>".concat(e.sumC,"</td></tr>"),i+="<tr><th>T</th><td>".concat(e.T_value,"</td></tr>"),i+="</tbody></table>",t.innerHTML=i}else t.textContent=e}},{key:"renderSolutionTable",value:function(t){document.getElementById("solution-table").innerHTML=""}},{key:"renderHungarianMethod",value:function(t){return(0,_hungarian.hungarianMethod)(t)}},{key:"renderOtherMethods",value:function(t){var e="";e+="<h3>Метод ветвей и границ</h3>",e+="<div>Метод ветвей и границ строит дерево решений, отбрасывая заведомо невыгодные варианты. Обычно используется для больших задач, когда полный перебор невозможен.</div>";var n=(0,_branch_and_bound.branchAndBoundAssignment)(t);if(n){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var r=0;r<n.assignment.length;r++)e+="<tr><th>x".concat(r+1,"</th><td>").concat(n.assignment[r]+1," (C: ").concat(t[r][n.assignment[r]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(n.cost,"</div>")}e+="<h3>Линейное программирование</h3>",e+="<div>Задача о назначениях может быть сведена к задаче линейного программирования и решена симплекс-методом или другими LP-алгоритмами.</div>";var a=(0,_lp_assignment.lpAssignment)(t);if(a){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var i=0;i<a.assignment.length;i++)e+="<tr><th>x".concat(i+1,"</th><td>").concat(a.assignment[i]+1," (C: ").concat(t[i][a.assignment[i]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(a.cost,"</div>")}e+="<h3>Жадные и эвристические методы</h3>",e+="<div>Жадные методы назначают работ по принципу минимальной стоимости на каждом шаге, но не гарантируют оптимальности.</div>";var o=(0,_greedy_assignment.greedyAssignment)(t);if(o){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var l=0;l<o.assignment.length;l++)e+="<tr><th>x".concat(l+1,"</th><td>").concat(o.assignment[l]+1," (C: ").concat(t[l][o.assignment[l]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(o.cost,"</div>")}return e}},{key:"renderAdvancedMethods",value:function(t,e,n){var r="<h3>Дополнительные точные методы (с ограничениями)</h3>",a=""===n.S||isNaN(n.S)?null:n.S,i=""===n.T_limit||isNaN(n.T_limit)?null:n.T_limit,o=(0,_branch_and_bound_strict.branchAndBoundStrictAssignment)(t,e,a,n.T_type,i);if(o){r+="<div><b>Ветвей и границ (строгий):</b></div>",r+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var l=0;l<o.assignment.length;l++)r+="<tr><th>x".concat(l+1,"</th><td>").concat(o.assignment[l]+1," (C: ").concat(t[l][o.assignment[l]],", T: ").concat(e[l][o.assignment[l]],")</td></tr>");r+="</tbody></table><div><b>Ответ:</b> S = ".concat(o.cost,", T = ").concat(o.T_value,"</div>")}else{var s=(0,_branch_and_bound_strict.branchAndBoundStrictAssignment)(t,e,null,n.T_type,null);if(s){r+='<div style="color:orange"><b>Нет допустимого решения по ограничениям. Лучшее решение без ограничений:</b></div>',r+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var c=0;c<s.assignment.length;c++)r+="<tr><th>x".concat(c+1,"</th><td>").concat(s.assignment[c]+1," (C: ").concat(t[c][s.assignment[c]],", T: ").concat(e[c][s.assignment[c]],")</td></tr>");r+="</tbody></table><div><b>Ответ:</b> S = ".concat(s.cost,", T = ").concat(s.T_value,"</div>")}else r+="<div>Нет решений даже без ограничений</div>"}var u=(0,_astar_assignment.astarAssignment)(t,e,a,n.T_type,i);if(u){r+="<div><b>A* (A-star):</b></div>",r+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var h=0;h<u.assignment.length;h++)r+="<tr><th>x".concat(h+1,"</th><td>").concat(u.assignment[h]+1," (C: ").concat(t[h][u.assignment[h]],", T: ").concat(e[h][u.assignment[h]],")</td></tr>");r+="</tbody></table><div><b>Ответ:</b> S = ".concat(u.cost,", T = ").concat(u.T_value,"</div>")}else{var d=(0,_astar_assignment.astarAssignment)(t,e,null,n.T_type,null);if(d){r+='<div style="color:orange"><b>Нет допустимого решения по ограничениям (A*). Лучшее решение без ограничений:</b></div>',r+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var m=0;m<d.assignment.length;m++)r+="<tr><th>x".concat(m+1,"</th><td>").concat(d.assignment[m]+1," (C: ").concat(t[m][d.assignment[m]],", T: ").concat(e[m][d.assignment[m]],")</td></tr>");r+="</tbody></table><div><b>Ответ:</b> S = ".concat(d.cost,", T = ").concat(d.T_value,"</div>")}else r+="<div>Нет решений даже без ограничений (A*)</div>"}return r}},{key:"renderExtraMethods",value:function(t,e){var n=document.getElementById("extra-methods"),r="",a=t,i=a.length;0<i&&a.every(function(t){return t.length===i});r+='<div style="margin-bottom:10px">',r+='<label><input type="checkbox" id="solve-full" '+(e.solveFull?"checked":"")+"> Полный перебор</label> ",r+='<label><input type="checkbox" id="solve-bnb-strict" '+(e.solveBnbStrict?"checked":"")+"> Ветвей и границ (строгий)</label> ",r+='<label><input type="checkbox" id="solve-astar" '+(e.solveAstar?"checked":"")+"> A* (A-star)</label>",r+="</div>";var o=this.getMatrixT().matrix;e.solveFull&&(r+=this.renderFullEnumeration(a,o,e)),e.solveBnbStrict&&(r+=this.renderBnbStrict(a,o,e)),e.solveAstar&&(r+=this.renderAstar(a,o,e)),n.innerHTML=r}},{key:"renderFullEnumeration",value:function(r,a,t){var l=_regenerator().m(u),i=r.length;if(!i||r.some(function(t){return t.length!==i}))return"<div>Матрица должна быть квадратной</div>";var e,n,o=Array.from({length:i},function(t,e){return e}),s=[],c=[];function u(e,n,r){var a,i,o;return _regenerator().w(function(t){for(;;)switch(t.n){case 0:if(n===r)return t.n=1,e.slice();t.n=2;break;case 1:t.n=6;break;case 2:a=n;case 3:if(a<=r)return i=[e[a],e[n]],e[n]=i[0],e[a]=i[1],t.d(_regeneratorValues(u(e,n+1,r)),4);t.n=6;break;case 4:o=[e[a],e[n]],e[n]=o[0],e[a]=o[1];case 5:a++,t.n=3;break;case 6:return t.a(2)}},l)}var h,d=_createForOfIteratorHelper(u(o,0,i-1));try{for(d.s();!(h=d.n()).done;){for(var m=h.value,f=0,v=[],y=0;y<i;y++)f+=r[y][m[y]],v.push(a[y][m[y]]);var b="min"===t.T_type?Math.max.apply(Math,v):Math.min.apply(Math,v);c.push({perm:m.slice(),sumC:f,Tval:b})}}catch(t){d.e(t)}finally{d.f()}e=Math.min.apply(Math,_toConsumableArray(c.map(function(t){return t.Tval})));var g=c.filter(function(t){return t.Tval===e});if(n=Math.min.apply(Math,_toConsumableArray(g.map(function(t){return t.sumC}))),!(s=g.filter(function(t){return t.sumC===n})).length)return"<div>Нет решений</div>";var p="<h3>Полный перебор</h3>";return s.forEach(function(t,e){p+="<b>Решение №".concat(e+1,"</b>"),p+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var n=0;n<i;n++)p+="<tr><th>x".concat(n+1,"</th><td>").concat(t.perm[n]+1," (C: ").concat(r[n][t.perm[n]],", T: ").concat(a[n][t.perm[n]],")</td></tr>");p+="<tr><th>S</th><td>".concat(t.sumC,"</td></tr>"),p+="<tr><th>T</th><td>".concat(t.Tval,"</td></tr>"),p+="</tbody></table>"}),p+="<details><summary>Ход решения</summary>",p+="<table><thead><tr><th>Перестановка</th><th>S</th><th>T</th></tr></thead><tbody>",c.forEach(function(t){p+="<tr><td>".concat(t.perm.map(function(t){return t+1}).join("-"),"</td><td>").concat(t.sumC,"</td><td>").concat(t.Tval,"</td></tr>")}),p+="</tbody></table></details>"}},{key:"renderBnbStrict",value:function(r,a,t){var e=""===t.S||isNaN(t.S)?null:t.S,n=""===t.T_limit||isNaN(t.T_limit)?null:t.T_limit;var u,h,d,m,f,v,y,b,g,i=(u=r,h=a,d=e,m=t.T_type,f=n,v=u.length,y="min"===m?1/0:-1/0,b=1/0,g=[],function t(e,n,r,a,i){if(e===v){var o="min"===m?Math.max.apply(Math,_toConsumableArray(i)):Math.min.apply(Math,_toConsumableArray(i)),l=!0;return null!==d&&d<a&&(l=!1),null!==f&&("min"===m&&f<o&&(l=!1),"max"===m&&o<f&&(l=!1)),void(l&&(g.push({perm:r.slice(),sumC:a,Tval:o}),("min"===m&&(o<y||o===y&&a<b)||"max"===m&&(y<o||o===y&&a<b))&&(y=o,b=a)))}for(var s=0;s<v;s++)if(!n[s]){var c=a+u[e][s];if(null!==d&&d<c)continue;n[s]=!0,r.push(s),i.push(h[e][s]),t(e+1,n,r,c,i),n[s]=!1,r.pop(),i.pop()}}(0,Array(v).fill(!1),[],0,[]),{bests:g.filter(function(t){return t.Tval===y&&t.sumC===b}),all:g}),o=i.bests,l=i.all,s="<h3>Ветвей и границ (строгий)</h3>";return o.length?o.forEach(function(t,e){s+="<b>Решение №".concat(e+1,"</b>"),s+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var n=0;n<r.length;n++)s+="<tr><th>x".concat(n+1,"</th><td>").concat(t.perm[n]+1," (C: ").concat(r[n][t.perm[n]],", T: ").concat(a[n][t.perm[n]],")</td></tr>");s+="<tr><th>S</th><td>".concat(t.sumC,"</td></tr>"),s+="<tr><th>T</th><td>".concat(t.Tval,"</td></tr>"),s+="</tbody></table>"}):s+="<div>Нет допустимого решения</div>",s+="<details><summary>Ход решения</summary>",s+="<table><thead><tr><th>Перестановка</th><th>S</th><th>T</th></tr></thead><tbody>",l.forEach(function(t){s+="<tr><td>".concat(t.perm.map(function(t){return t+1}).join("-"),"</td><td>").concat(t.sumC,"</td><td>").concat(t.Tval,"</td></tr>")}),s+="</tbody></table></details>"}},{key:"renderAstar",value:function(r,a,t){var e=""===t.S||isNaN(t.S)?null:t.S,n=""===t.T_limit||isNaN(t.T_limit)?null:t.T_limit;var u,h,d,m,f,v,y,b,g,i=(u=r,h=a,d=e,m=t.T_type,f=n,v=u.length,y="min"===m?1/0:-1/0,b=1/0,g=[],function t(e,n,r,a,i){if(e===v){var o="min"===m?Math.max.apply(Math,_toConsumableArray(i)):Math.min.apply(Math,_toConsumableArray(i)),l=!0;return null!==d&&d<a&&(l=!1),null!==f&&("min"===m&&f<o&&(l=!1),"max"===m&&o<f&&(l=!1)),void(l&&(g.push({perm:r.slice(),sumC:a,Tval:o}),("min"===m&&(o<y||o===y&&a<b)||"max"===m&&(y<o||o===y&&a<b))&&(y=o,b=a)))}for(var s=0;s<v;s++)if(!n[s]){var c=a+u[e][s];if(null!==d&&d<c)continue;n[s]=!0,r.push(s),i.push(h[e][s]),t(e+1,n,r,c,i),n[s]=!1,r.pop(),i.pop()}}(0,Array(v).fill(!1),[],0,[]),{bests:g.filter(function(t){return t.Tval===y&&t.sumC===b}),all:g}),o=i.bests,l=i.all,s="<h3>A* (A-star)</h3>";return o.length?o.forEach(function(t,e){s+="<b>Решение №".concat(e+1,"</b>"),s+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var n=0;n<r.length;n++)s+="<tr><th>x".concat(n+1,"</th><td>").concat(t.perm[n]+1," (C: ").concat(r[n][t.perm[n]],", T: ").concat(a[n][t.perm[n]],")</td></tr>");s+="<tr><th>S</th><td>".concat(t.sumC,"</td></tr>"),s+="<tr><th>T</th><td>".concat(t.Tval,"</td></tr>"),s+="</tbody></table>"}):s+="<div>Нет допустимого решения</div>",s+="<details><summary>Ход решения</summary>",s+="<table><thead><tr><th>Перестановка</th><th>S</th><th>T</th></tr></thead><tbody>",l.forEach(function(t){s+="<tr><td>".concat(t.perm.map(function(t){return t+1}).join("-"),"</td><td>").concat(t.sumC,"</td><td>").concat(t.Tval,"</td></tr>")}),s+="</tbody></table></details>"}},{key:"robustHungarianMethod",value:function(t){var l=_regenerator().m(b),a=t.length;if(!a||t.some(function(t){return t.length!==a}))return null;for(var i=t.map(function(t){return t.slice()}),e=0;e<a;e++)for(var n=Math.min.apply(Math,_toConsumableArray(i[e])),r=0;r<a;r++)i[e][r]-=n;for(var o=function(e){for(var t=i.map(function(t){return t[e]}),n=Math.min.apply(Math,_toConsumableArray(t)),r=0;r<a;r++)i[r][e]-=n},s=0;s<a;s++)o(s);for(var c=Array(a).fill(-1),u=Array(a).fill(!1),h=0;h<a;h++)for(var d=0;d<a;d++)if(0===i[h][d]&&!u[d]){u[c[h]=d]=!0;break}if(!c.includes(-1)){for(var m=0,f=0;f<a;f++)m+=t[f][c[f]];return{assignment:c,cost:m}}if(7<a)return null;var v=1/0,y=null;function b(e,n,r){var a,i,o;return _regenerator().w(function(t){for(;;)switch(t.n){case 0:if(n===r)return t.n=1,e.slice();t.n=2;break;case 1:t.n=6;break;case 2:a=n;case 3:if(a<=r)return i=[e[a],e[n]],e[n]=i[0],e[a]=i[1],t.d(_regeneratorValues(b(e,n+1,r)),4);t.n=6;break;case 4:o=[e[a],e[n]],e[n]=o[0],e[a]=o[1];case 5:a++,t.n=3;break;case 6:return t.a(2)}},l)}var g,p=_createForOfIteratorHelper(b(Array.from({length:a},function(t,e){return e}),0,a-1));try{for(p.s();!(g=p.n()).done;){for(var _=g.value,T=0,x=0;x<a;x++)T+=t[x][_[x]];T<v&&(v=T,y=_.slice())}}catch(t){p.e(t)}finally{p.f()}return y?{assignment:y,cost:v}:null}},{key:"renderBranchMethod",value:function(t){var e="<h3>Метод ветвей и границ</h3>",n=(0,_branch_and_bound.branchAndBoundAssignment)(t);if(n){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var r=0;r<n.assignment.length;r++)e+="<tr><th>x".concat(r+1,"</th><td>").concat(n.assignment[r]+1," (C: ").concat(t[r][n.assignment[r]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(n.cost,"</div>")}return e}},{key:"renderLPMethod",value:function(t){var e="<h3>Линейное программирование</h3>",n=(0,_lp_assignment.lpAssignment)(t);if(n){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var r=0;r<n.assignment.length;r++)e+="<tr><th>x".concat(r+1,"</th><td>").concat(n.assignment[r]+1," (C: ").concat(t[r][n.assignment[r]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(n.cost,"</div>")}return e}},{key:"renderGreedyMethod",value:function(t){var e="<h3>Жадные и эвристические методы</h3>",n=(0,_greedy_assignment.greedyAssignment)(t);if(n){e+="<div><b>Решение:</b></div>",e+="<table><thead><tr><th></th><th>Назначение</th></tr></thead><tbody>";for(var r=0;r<n.assignment.length;r++)e+="<tr><th>x".concat(r+1,"</th><td>").concat(n.assignment[r]+1," (C: ").concat(t[r][n.assignment[r]],")</td></tr>");e+="</tbody></table>",e+="<div><b>Ответ:</b> Суммарная стоимость = ".concat(n.cost,"</div>")}return e}}])}(),AssignmentController=function(){return _createClass(function t(){_classCallCheck(this,t),this.model=null,this.view=new AssignmentView,this.initEvents(),this.initPresetButtons()},[{key:"initEvents",value:function(){var t=this;document.getElementById("solve-btn").addEventListener("click",function(){return t.solve()})}},{key:"initPresetButtons",value:function(){var t=document.getElementById("matrix-c-textarea"),e=document.getElementById("matrix-t-textarea"),n=document.getElementById("salary-fund");document.getElementById("fill-default").addEventListener("click",function(){t.value="3 4 5 8 3\n2 9 6 7 8\n5 1 8 5 2\n8 9 6 4 3\n3 2 5 7 9",e.value="7 6 5 2 7\n8 1 4 3 2\n5 9 2 5 8\n2 1 4 6 7\n7 8 5 3 1",n.value=33,t.dispatchEvent(new Event("input")),e.dispatchEvent(new Event("input"))}),document.getElementById("fill-test").addEventListener("click",function(){t.value="2 2 2\n2 2 2\n2 2 2",e.value="1 1 2\n1 2 1\n2 1 1",n.value=6,t.dispatchEvent(new Event("input")),e.dispatchEvent(new Event("input"))}),document.getElementById("clear-all").addEventListener("click",function(){t.value="",e.value="",n.value="",t.dispatchEvent(new Event("input")),e.dispatchEvent(new Event("input"))})}},{key:"solve",value:function(){var t=this.view.getMatrixC(),e=t.matrix,n=t.size,r=(t.isSquare,this.view.getMatrixT()),a=r.matrix,i=r.size;window.assignmentModelInputC=e,window.assignmentModelInputT=a;var o=Math.min(n,i);if(!o||e.length!==o||a.length!==o)return this.view.renderAnswer("Ошибка: некорректный ввод матриц"),this.view.renderSolutionTable([]),void(document.getElementById("extra-methods").innerHTML="");this.model=new AssignmentModel(o),this.model.setMatrixC(e),this.model.setMatrixT(a);var l=this.view.getParams();this.model.setS(l.S),this.model.setTType(l.T_type),this.model.setTLimit(l.T_limit);var s=this.model.solve(l),c=s.answer,u=s.solutions;this.view.renderAnswer(c.answer||c,u),this.view.renderSolutionTable(u),this.view.renderExtraMethods(e,l)}}])}();window.addEventListener("DOMContentLoaded",function(){new AssignmentController});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
