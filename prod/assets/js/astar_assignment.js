"use strict";function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,t){if(r){if("string"==typeof r)return _arrayLikeToArray(r,t);var e={}.toString.call(r).slice(8,-1);return"Object"===e&&r.constructor&&(e=r.constructor.name),"Map"===e||"Set"===e?Array.from(r):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?_arrayLikeToArray(r,t):void 0}}function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _arrayLikeToArray(r,t){(null==t||t>r.length)&&(t=r.length);for(var e=0,n=Array(t);e<t;e++)n[e]=r[e];return n}function astarAssignment(l,r){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,e=3<arguments.length&&void 0!==arguments[3]?arguments[3]:"min",n=4<arguments.length&&void 0!==arguments[4]?arguments[4]:null,u=l.length,a=null,o="min"===e?1/0:-1/0,i=1/0,s=[{i:0,used:Array(u).fill(!1),perm:[],sumC:0,times:[],priority:0}];function y(r,t,e){for(var n=0,a=r;a<u;a++){for(var o=1/0,i=0;i<u;i++)t[i]||(o=Math.min(o,l[a][i]));n+=o}return e+n}for(;s.length;){s.sort(function(r,t){return r.priority-t.priority});var m=s.shift(),f=m.i,c=m.used,p=m.perm,A=m.sumC,d=m.times;if(f!==u){for(var h=0;h<u;h++)if(!c[h]){var v=A+l[f][h];if(null!==t&&t<v)continue;var b=c.slice();b[h]=!0;var _=p.concat([h]),g=d.concat([r[f][h]]),T=y(f+1,b,v);s.push({i:f+1,used:b,perm:_,sumC:v,times:g,priority:T})}}else{var C="min"===e?Math.max.apply(Math,_toConsumableArray(d)):Math.min.apply(Math,_toConsumableArray(d)),I=!0;null!==t&&t<A&&(I=!1),null!==n&&("min"===e&&n<C&&(I=!1),"max"===e&&C<n&&(I=!1)),I&&("min"===e&&(C<o||C===o&&A<i)||"max"===e&&(o<C||C===o&&A<i))&&(a=p.slice(),o=C,i=A)}}return a?{assignment:a,cost:i,T_value:o}:null}Object.defineProperty(exports,"__esModule",{value:!0}),exports.astarAssignment=astarAssignment;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzdGFyX2Fzc2lnbm1lbnQuanMiXSwibmFtZXMiOlsiYXN0YXJBc3NpZ25tZW50IiwiQyIsIlQiLCJTX2xpbWl0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiVF90eXBlIiwiVF9saW1pdCIsIm4iLCJiZXN0IiwiYmVzdFQiLCJJbmZpbml0eSIsImJlc3RTIiwiaGVhcCIsImkiLCJ1c2VkIiwiQXJyYXkiLCJmaWxsIiwicGVybSIsInN1bUMiLCJ0aW1lcyIsInByaW9yaXR5IiwiaGV1cmlzdGljIiwiayIsImoiLCJtaW5DIiwiTWF0aCIsIm1pbiIsInNvcnQiLCJhIiwiYiIsIm5vZGUiLCJzaGlmdCIsIm5ld1N1bUMiLCJuZXdVc2VkIiwic2xpY2UiLCJUdmFsIiwiY29uY2F0IiwidmFsaWQiLCJuZXdQZXJtIiwibWF4IiwiYXBwbHkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhc3NpZ25tZW50IiwiY29zdCIsIlRfdmFsdWUiXSwibWFwcGluZ3MiOiI4OUJBRU8sU0FBU0EsZ0JBQWdCQyxFQUFHQyxHQUFtRCxJQUFoREMsRUFBTyxFQUFBQyxVQUFBQyxhQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBRyxLQUFNRyxFQUFNLEVBQUFILFVBQUFDLGFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFHLE1BQU9JLEVBQU8sRUFBQUosVUFBQUMsYUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUcsS0FDeEVLLEVBQUlSLEVBQUVJLE9BQ1JLLEVBQU8sS0FBTUMsRUFBbUIsUUFBWEosRUFBbUJLLEVBQUFBLEdBQVlBLEVBQUFBLEVBQVVDLEVBQVFELEVBQUFBLEVBQ3RFRSxFQUFPLENBQUMsQ0FDVkMsRUFBRyxFQUNIQyxLQUFNQyxNQUFNUixHQUFHUyxNQUFLLEdBQ3BCQyxLQUFNLEdBQ05DLEtBQU0sRUFDTkMsTUFBTyxHQUNQQyxTQUFVLElBVmQsU0FBQUMsRUFBQVIsRUFBQUMsRUFBQUksR0FDb0QsSUFBa0MsSUFBaERqQixFQUFPLEVBQWVxQixFQUFBcEIsRUFBQUEsRUFBQUssRUFBQUosSUFBQSxDQUNwREksSUFEOERELElBQUFBLEVBQU9KLEVBQUFBLEVBQy9EQyxFQUFNLEVBQUFvQixFQUFBaEIsRUFBQWdCLElBQUFULEVBQUFTLEtBQUFDLEVBQUFDLEtBQUFDLElBQUFGLEVBQUF6QixFQUFBdUIsR0FBQUMsS0FDZGYsR0FBT2dCLEVBQXVEYixPQUFLTyxFQUFHUixFQW1CMUUsS0FqQk1FLEVBQUFULFFBQUEsQ0FDSlcsRUFBSWEsS0FBRVosU0FBS2EsRUFBR0MsR0FBQ2IsT0FBS1ksRUFBQVIsU0FBTVMsRUFBQVQsV0FDMUJILElBQUlhLEVBQUlsQixFQUFBbUIsUUFDRmxCLEVBQUNpQixFQUFEakIsRUFBQ0MsRUFBQWdCLEVBQUFoQixLQUFBRyxFQUFBYSxFQUFBYixLQUFBQyxFQUFBWSxFQUFBWixLQUFBQyxFQUFBVyxFQUFBWCxNQUNQQSxHQUFBQSxJQUFTWixHQWdCVCxJQUFPLElBQThCdUIsRUFBL0JqQixFQUFDVSxFQUFBaEIsRUFBQWdCLElBQUVULElBQUlBLEVBQXdCZ0IsR0FBNUJoQixDQUFNRyxJQUFJZSxFQUFBZCxFQUFBbkIsRUFBQWMsR0FBQVUsR0FBRUwsR0FBSSxPQUFBakIsR0FBQUEsRUFBQStCLEVBQUEsU0FBRWIsSUFBS2MsRUFBTGQsRUFBS2UsUUFDNUJyQixFQUFPVSxJQUFFLEVBQ1gsSUFBSVksRUFBTzlCLEVBQU0rQixPQUFVLENBQUFiLElBQ3ZCYyxFQUFZbEIsRUFBQWlCLE9BQUEsQ0FBQXBDLEVBQUFhLEdBQUFVLEtBQ1p0QixFQUFPb0IsRUFBU1IsRUFBSUssRUFBSWUsRUFBVUQsR0FDdENwQixFQUFJTixLQUFPLENBQ1RPLEVBQUlSLEVBQUFBLEVBQ0pTLEtBQUlULEVBQ05ZLEtBQUFxQixFQUNJRCxLQUFLTCxFQUNQYixNQUFLZCxFQUVIRyxTQUFPUyxTQTVCYkUsQ0FDQUMsSUFBQUEsRUFBVSxRQUFBZixFQUFBb0IsS0FBQWMsSUFBQUMsTUFBQWYsS0FBQWdCLG1CQUFBdEIsSUFBQU0sS0FBQUMsSUFBQWMsTUFBQWYsS0FBQWdCLG1CQUFBdEIsSUFDVmtCLEdBQUEsRUFDa0IsT0FBcEJwQyxHQUFrQ2tCLEVBQU5ELElBQWFtQixHQUFBLEdBQ3ZDLE9BQUEvQixJQUNZLFFBQUpELEdBQUlDLEVBQUE2QixJQUFBRSxHQUFBLEdBQ0ssUUFBWmhDLEdBQXVCOEIsRUFBQTdCLElBQUErQixHQUFBLElBRTFCQSxJQUNZLFFBQVJoQyxJQUFROEIsRUFBQTFCLEdBQUEwQixJQUFBMUIsR0FBQVMsRUFBQVAsSUFDZCxRQUFBTixJQUFBSSxFQUFBMEIsR0FBQUEsSUFBQTFCLEdBQUFTLEVBQUFQLE1BQ0FILEVBQVdTLEVBQU9pQixRQUNwQnpCLEVBQUEwQixFQUNPdkIsRUFBS1QsSUEwQ1osT0F0QklLLEVBQ0YsQ0FBQWtDLFdBQUFsQyxFQUFBbUMsS0FBQWhDLEVBQUFpQyxRQUFBbkMsR0FERSIsImZpbGUiOiJhc3Rhcl9hc3NpZ25tZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQSogKEEtc3Rhcikg0LTQu9GPINC30LDQtNCw0YfQuCDQviDQvdCw0LfQvdCw0YfQtdC90LjRj9GFINGBINC+0LPRgNCw0L3QuNGH0LXQvdC40Y/QvNC4INC/0L4gQyDQuCBUXHJcbi8vIEMsIFQg4oCUINC60LLQsNC00YDQsNGC0L3Ri9C1INC80LDRgtGA0LjRhtGLLCBTX2xpbWl0IOKAlCDQvtCz0YDQsNC90LjRh9C10L3QuNC1INC90LAg0YHRg9C80LzRgyBDLCBUX3R5cGUgKCdtaW4nLydtYXgnKSwgVF9saW1pdCDigJQg0L7Qs9GA0LDQvdC40YfQtdC90LjQtSDQvdCwIFRcclxuZXhwb3J0IGZ1bmN0aW9uIGFzdGFyQXNzaWdubWVudChDLCBULCBTX2xpbWl0ID0gbnVsbCwgVF90eXBlID0gJ21pbicsIFRfbGltaXQgPSBudWxsKSB7XHJcbiAgY29uc3QgbiA9IEMubGVuZ3RoO1xyXG4gIGxldCBiZXN0ID0gbnVsbCwgYmVzdFQgPSBUX3R5cGUgPT09ICdtaW4nID8gSW5maW5pdHkgOiAtSW5maW5pdHksIGJlc3RTID0gSW5maW5pdHk7XHJcbiAgbGV0IGhlYXAgPSBbe1xyXG4gICAgaTogMCxcclxuICAgIHVzZWQ6IEFycmF5KG4pLmZpbGwoZmFsc2UpLFxyXG4gICAgcGVybTogW10sXHJcbiAgICBzdW1DOiAwLFxyXG4gICAgdGltZXM6IFtdLFxyXG4gICAgcHJpb3JpdHk6IDBcclxuICB9XTtcclxuICBmdW5jdGlvbiBoZXVyaXN0aWMoaSwgdXNlZCwgc3VtQywgdGltZXMpIHtcclxuICAgIC8vINCe0YbQtdC90LrQsCDQvtGB0YLQsNGC0LrQsCDQv9C+IEMgKNC20LDQtNC90L4pXHJcbiAgICBsZXQgcmVtQyA9IDA7XHJcbiAgICBmb3IgKGxldCBrID0gaTsgayA8IG47IGsrKykge1xyXG4gICAgICBsZXQgbWluQyA9IEluZmluaXR5O1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG47IGorKykgaWYgKCF1c2VkW2pdKSBtaW5DID0gTWF0aC5taW4obWluQywgQ1trXVtqXSk7XHJcbiAgICAgIHJlbUMgKz0gbWluQztcclxuICAgIH1cclxuICAgIHJldHVybiBzdW1DICsgcmVtQztcclxuICB9XHJcbiAgd2hpbGUgKGhlYXAubGVuZ3RoKSB7XHJcbiAgICBoZWFwLnNvcnQoKGEsIGIpID0+IGEucHJpb3JpdHkgLSBiLnByaW9yaXR5KTtcclxuICAgIGxldCBub2RlID0gaGVhcC5zaGlmdCgpO1xyXG4gICAgbGV0IHsgaSwgdXNlZCwgcGVybSwgc3VtQywgdGltZXMgfSA9IG5vZGU7XHJcbiAgICBpZiAoaSA9PT0gbikge1xyXG4gICAgICBsZXQgVHZhbCA9IFRfdHlwZSA9PT0gJ21pbicgPyBNYXRoLm1heCguLi50aW1lcykgOiBNYXRoLm1pbiguLi50aW1lcyk7XHJcbiAgICAgIGxldCB2YWxpZCA9IHRydWU7XHJcbiAgICAgIGlmIChTX2xpbWl0ICE9PSBudWxsICYmIHN1bUMgPiBTX2xpbWl0KSB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICBpZiAoVF9saW1pdCAhPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChUX3R5cGUgPT09ICdtaW4nICYmIFR2YWwgPiBUX2xpbWl0KSB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChUX3R5cGUgPT09ICdtYXgnICYmIFR2YWwgPCBUX2xpbWl0KSB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgIGlmICgoVF90eXBlID09PSAnbWluJyAmJiAoVHZhbCA8IGJlc3RUIHx8IChUdmFsID09PSBiZXN0VCAmJiBzdW1DIDwgYmVzdFMpKSkgfHxcclxuICAgICAgICAgICAgKFRfdHlwZSA9PT0gJ21heCcgJiYgKFR2YWwgPiBiZXN0VCB8fCAoVHZhbCA9PT0gYmVzdFQgJiYgc3VtQyA8IGJlc3RTKSkpKSB7XHJcbiAgICAgICAgICBiZXN0ID0gcGVybS5zbGljZSgpO1xyXG4gICAgICAgICAgYmVzdFQgPSBUdmFsO1xyXG4gICAgICAgICAgYmVzdFMgPSBzdW1DO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbjsgaisrKSB7XHJcbiAgICAgIGlmICghdXNlZFtqXSkge1xyXG4gICAgICAgIGxldCBuZXdTdW1DID0gc3VtQyArIENbaV1bal07XHJcbiAgICAgICAgaWYgKFNfbGltaXQgIT09IG51bGwgJiYgbmV3U3VtQyA+IFNfbGltaXQpIGNvbnRpbnVlO1xyXG4gICAgICAgIGxldCBuZXdVc2VkID0gdXNlZC5zbGljZSgpO1xyXG4gICAgICAgIG5ld1VzZWRbal0gPSB0cnVlO1xyXG4gICAgICAgIGxldCBuZXdQZXJtID0gcGVybS5jb25jYXQoW2pdKTtcclxuICAgICAgICBsZXQgbmV3VGltZXMgPSB0aW1lcy5jb25jYXQoW1RbaV1bal1dKTtcclxuICAgICAgICBsZXQgcHJpbyA9IGhldXJpc3RpYyhpICsgMSwgbmV3VXNlZCwgbmV3U3VtQywgbmV3VGltZXMpO1xyXG4gICAgICAgIGhlYXAucHVzaCh7XHJcbiAgICAgICAgICBpOiBpICsgMSxcclxuICAgICAgICAgIHVzZWQ6IG5ld1VzZWQsXHJcbiAgICAgICAgICBwZXJtOiBuZXdQZXJtLFxyXG4gICAgICAgICAgc3VtQzogbmV3U3VtQyxcclxuICAgICAgICAgIHRpbWVzOiBuZXdUaW1lcyxcclxuICAgICAgICAgIHByaW9yaXR5OiBwcmlvXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgaWYgKCFiZXN0KSByZXR1cm4gbnVsbDtcclxuICByZXR1cm4geyBhc3NpZ25tZW50OiBiZXN0LCBjb3N0OiBiZXN0UywgVF92YWx1ZTogYmVzdFQgfTtcclxufSAiXX0=
